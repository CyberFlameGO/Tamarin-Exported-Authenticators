theory ExportedAuthenticators_lemmas begin

// Function signature and definition of the equational theory E

functions: Expand/3, Exporter/3, Extract/2, adec/2, aenc/2, fst/1,
           h/1, hmac/1, mac/1, mask/2, pair/2, pk/1, sign/2, snd/1, true/0,
           unmask/2, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    unmask(mask(x, y), x) = y,
    unmask(mask(x, y), y) = x,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

/* looping facts with injective instances: State/6 */

section{* TLS Exported Authenticators*}

axiom Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

axiom Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

axiom pair_or_swapped:
  "∀ x y a b #i.
    (Check_pair_or_swapped( x, y, a, b ) @ #i) ⇒
    (((x = a) ∧ (y = b)) ∨ ((x = b) ∧ (y = a)))"
  // safety formula

axiom is_none:
  "∀ cert status #i.
    (Check_is_none( cert, status ) @ #i) ⇒
    (((cert = 'none') ∧ (status = 'uni')) ∨
     ((¬(cert = 'none')) ∧ (status = 'bi')))"
  // safety formula

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ RevLtk( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_0:
   [ Fr( ~iid ) ]
  --[
  Adv_PreStart( ~iid, $I, $S, 'client' ), I0( ~iid ), Neq( $I, $S )
  ]->
   [
   State( ~iid, 'I0', $I, $S, 'client', 'none' ),
   Create_TLS_Channel( $I, ~iid, $S ), Out( ~iid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Adv_TLS_channel1:
   [ Create_TLS_Channel( $C, cid, $I ), Fr( ~iid ), !Ltk( $I, ltkI ) ]
  --[ Adv_TLS( $I, ~iid ) ]->
   [
   Create_TLS_Channel2( $C, cid, $I, ~iid, pk(ltkI) ),
   State( ~iid, 'I0', $I, $C, 'server', 'none' ),
   Out( <cid, ~iid, ltkI> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_1_Uni:
   [
   Create_TLS_Channel2( $I, ~iid, $S, sid, pk(ltkS) ),
   State( ~iid, 'I0', $I, $S, 'client', 'none' ), !Pk( $S, pk(ltkS) )
   ]
  --[ I1( ~iid ), StartI( ~iid, $I, $S, 'client' ) ]->
   [
   State( ~iid, 'I1', $I, $S, 'client', 'auth' ),
   Create_TLS_Channel3( $I, ~iid, 'none', $S, sid, pk(ltkS) ),
   Out( sid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_1_Bi:
   [
   Create_TLS_Channel2( $I, ~iid, $S, sid, pk(ltkS) ),
   State( ~iid, 'I0', $I, $S, 'client', 'none' ), !Pk( $S, pk(ltkS) ),
   !Ltk( $I, ltkI )
   ]
  --[ I1( ~iid ), StartI( ~iid, $I, $S, 'client' ) ]->
   [
   State( ~iid, 'I1', $I, $S, 'client', 'auth' ),
   Create_TLS_Channel3( $I, ~iid, pk(ltkI), $S, sid, pk(ltkI) ),
   Out( <sid, ltkI> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_2_uni:
   [
   Create_TLS_Channel3( $C, cid, 'none', $I, ~iid, pk(ltkI) ),
   State( ~iid, 'I0', $I, $C, 'server', 'none' )
   ]
  --[ StartI( ~iid, $I, $C, 'server' ), I1( ~iid ) ]->
   [
   State( ~iid, 'I1', $I, $C, 'server', 'none' ),
   Create_TLS_Channel4( $C, cid, 'none', $I, ~iid, pk(ltkI), 'uni' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_2_bi:
   [
   Create_TLS_Channel3( $C, cid, pk(ltkC), $I, ~iid, pk(ltkI) ),
   State( ~iid, 'I0', $I, $C, 'server', 'none' ), !Pk( $C, pk(ltkC) )
   ]
  --[ StartI( ~iid, $I, $C, 'server' ), I1( ~iid ) ]->
   [
   State( ~iid, 'I1', $I, $C, 'server', 'auth' ),
   Create_TLS_Channel4( $C, cid, pk(ltkC), $I, ~iid, pk(ltkI), 'bi' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_Send_TLS_owner:
   [
   In( <iid, m> ),
   !TLS_Channel( ms, TLS_transcript, auth_status, $I, iid, $S, sid )
   ]
  --[ A_Send( iid ), TLS_Sent( ms ) ]->
   [ TLS_Send( iid, $I, $S, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_Send_TLS_target:
   [
   In( <iid, m> ),
   !TLS_Channel( ms, TLS_transcript, auth_status, $C, cid, $I, iid )
   ]
  --[ A_Send( iid ), TLS_Sent( ms ) ]->
   [ TLS_Send( iid, $I, $C, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_Recv_TLS:
   [
   TLS_Recv( iid, from_host, to_host, msg ), In( iid ),
   !TLS_Channel( ms, TLS_transcript, auth_status, $I, iid, $S, sid )
   ]
  --[ A_Recv( iid ), TLS_Recvd( ms ) ]->
   [ Out( <from_host, to_host, msg> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), DelegateLtk( $TP, ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pubkey ) ] --> [ Out( pubkey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_TLS_channel:
   [
   Fr( ms ), Fr( TLS_transcript ),
   Create_TLS_Channel4( $C, nc, cert, $S, ns, pk(ltkS), status )
   ]
  --[ SessionKey( ms, TLS_transcript ), Check_is_none( cert, status )
  ]->
   [
   !TLS_Channel( ms, TLS_transcript, status, $C, nc, $S, ns ),
   !Exporters( ms, 'server', ns,
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32')
   ),
   !Exporters( ms, 'client', nc,
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_TLS_Channel_owner:
   [
   TLS_Send( nc, $C, $S, msg ),
   !TLS_Channel( ms, TLS_transcript, state, $C, nc, $S, ns )
   ]
  -->
   [ TLS_Recv( ns, $C, $S, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_TLS_Channel_target:
   [
   TLS_Send( ns, $S, $C, msg ),
   !TLS_Channel( ms, TLS_transcript, state, $C, nc, $S, ns )
   ]
  -->
   [ TLS_Recv( nc, $S, $C, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_0:
   [ Fr( ~cid ) ]
  --[ PreStart( ~cid, $C, $S, 'client' ), C0( ~cid ), Neq( $C, $S )
  ]->
   [
   State( ~cid, 'C0', $C, $S, 'client', 'none' ),
   Create_TLS_Channel( $C, ~cid, $S )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1_uni:
   [
   Create_TLS_Channel2( $C, ~cid, $S, sid, pk(ltkS) ),
   State( ~cid, 'C0', $C, $S, 'client', 'none' ), !Pk( $S, pk(ltkS) )
   ]
  --[ C1( ~cid ), Start( ~cid, $C, $S, 'client' ) ]->
   [
   State( ~cid, 'C1', $C, $S, 'client', 'auth' ),
   Create_TLS_Channel3( $C, ~cid, 'none', $S, sid, pk(ltkS) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1_bi:
   [
   Create_TLS_Channel2( $C, ~cid, $S, sid, pk(ltkS) ),
   State( ~cid, 'C0', $C, $S, 'client', 'none' ), !Pk( $S, pk(ltkS) ),
   !Ltk( $C, ltkC )
   ]
  --[ C1( ~cid ), Start( ~cid, $C, $S, 'client' ) ]->
   [
   State( ~cid, 'C1', $C, $S, 'client', 'auth' ),
   Create_TLS_Channel3( $C, ~cid, pk(ltkC), $S, sid, pk(ltkS) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_Request:
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   !TLS_Channel( ms, TLS_transcript, auth_status, $C, ~cid, $S, sid ),
   Fr( ~certificate_request_context ), Fr( ~request_id )
   ]
  --[
  C_Req( ~cid, ~certificate_request_context ),
  Instance( ~cid, $C, $S, 'client' ),
  Requested( ~cid, $C, 'client',
             <'13', ~certificate_request_context, $certificate_extensions>
  ),
  TLS_Sent( ms )
  ]->
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   TLS_Send( ~cid, $C, $S,
             <'13', ~certificate_request_context, $certificate_extensions>
   ),
   PendingReqI( ~request_id, ~cid, 'client',
                <'13', ~certificate_request_context, $certificate_extensions>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) C_RecvReq:
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   TLS_Recv( ~cid, $S, $C,
             <'13', certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
   Fr( ~request_id )
   ]
  --[
  C_RecvReq( ~cid ),
  RecvReq( $C, ms, 'client',
           <'13', certificate_request_context, $certificate_extensions>
  ),
  Instance( ~cid, $C, $S, 'client' ), TLS_Recvd( ms )
  ]->
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   PendingReqR( ~request_id, ~cid, 'client',
                <'13', certificate_request_context, $certificate_extensions>
   )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) C_Send:
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   PendingReqR( ~request_id, ~cid, 'client',
                <'13', ~certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
   !Ltk( $A, ltkA ), DelegateLtk( $C, ltkA )
   ]
  --[
  C_Send( ~cid ), Owns( $C, ms, 'client', <$A, ltkA> ),
  Instance( ~cid, $C, $S, 'client' ),
  Fulfil( ~cid, $C, 'client',
          <'13', ~certificate_request_context, $certificate_extensions>,
          <$A, pk(ltkA)>
  ),
  TLS_Sent( ms )
  ]->
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   TLS_Send( ~cid, $C, $S,
             <<'11', ~certificate_request_context, pk(ltkA)>, 
              <'15', 
               sign(<'ExportedAuthenticator', 
                     h(<hccc, 
                        <'13', ~certificate_request_context, $certificate_extensions>, 
                        pk(ltkA)>)
                    >,
                    ltkA)
              >, 
              '20', 
              hmac(<fmc, hccc, 
                    <'13', ~certificate_request_context, $certificate_extensions>, 
                    <'11', ~certificate_request_context, pk(ltkA)>, '15', 
                    sign(<'ExportedAuthenticator', 
                          h(<hccc, 
                             <'13', ~certificate_request_context, $certificate_extensions>, 
                             pk(ltkA)>)
                         >,
                         ltkA)
                   >)
             >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) C_Recv:
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   TLS_Recv( ~cid, $S, $C,
             <<'11', certificate_request_context, pk(ltkA)>, <'15', signature>, 
              '20', verify_data>
   ),
   PendingReqI( ~request_id, ~cid, 'client',
                <'13', certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
   !Pk( $A, pk(ltkA) )
   ]
  --[
  C_Recv( ~cid ),
  Eq( verify(signature,
             <'ExportedAuthenticator', 
              h(<hccs, 
                 <'13', certificate_request_context, $certificate_extensions>, 
                 pk(ltkA)>)
             >,
             pk(ltkA)),
      true
  ),
  Eq( verify_data,
      hmac(<fms, hccs, 
            <'13', certificate_request_context, $certificate_extensions>, 
            <'11', certificate_request_context, pk(ltkA)>, '15', signature>)
  ),
  Recv( $C, ms, 'client', <$A, pk(ltkA)> ),
  Fulfilled( ~cid, $C, 'client',
             <'13', certificate_request_context, $certificate_extensions>,
             <$A, pk(ltkA)>
  ),
  Instance( ~cid, $C, $S, 'client' ), TLS_Recvd( ms )
  ]->
   [ State( ~cid, 'C1', $C, $S, 'client', auth_status ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) C_Recv:
     [
     State( ~cid, 'C1', $C, $S, 'client', auth_status ),
     TLS_Recv( ~cid, $S, $C,
               <<'11', certificate_request_context, pk(ltkA)>, <'15', signature>, 
                '20', verify_data>
     ),
     PendingReqI( ~request_id, ~cid, 'client',
                  <'13', certificate_request_context, $certificate_extensions>
     ),
     !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
     !Pk( $A, pk(ltkA) )
     ]
    --[
    C_Recv( ~cid ), Eq( z, true ),
    Eq( verify_data,
        hmac(<fms, hccs, 
              <'13', certificate_request_context, $certificate_extensions>, 
              <'11', certificate_request_context, pk(ltkA)>, '15', signature>)
    ),
    Recv( $C, ms, 'client', <$A, pk(ltkA)> ),
    Fulfilled( ~cid, $C, 'client',
               <'13', certificate_request_context, $certificate_extensions>,
               <$A, pk(ltkA)>
    ),
    Instance( ~cid, $C, $S, 'client' ), TLS_Recvd( ms )
    ]->
     [ State( ~cid, 'C1', $C, $S, 'client', auth_status ) ]
    variants (modulo AC)
    1. $certificate_extensions
             = $certificate_extensions.34
       certificate_request_context
             = certificate_request_context.38
       hccs  = hccs.42
       ltkA  = ltkA.43
       signature
             = sign(<'ExportedAuthenticator', 
                     h(<hccs.42, 
                        <'13', certificate_request_context.38, $certificate_extensions.34
                        >, 
                        pk(ltkA.43)>)
                    >,
                    ltkA.43)
       z     = true
    
    2. $certificate_extensions
             = $certificate_extensions.36
       certificate_request_context
             = certificate_request_context.40
       hccs  = hccs.44
       ltkA  = ltkA.45
       signature
             = signature.47
       z     = verify(signature.47,
                      <'ExportedAuthenticator', 
                       h(<hccs.44, 
                          <'13', certificate_request_context.40, $certificate_extensions.36
                          >, 
                          pk(ltkA.45)>)
                      >,
                      pk(ltkA.45))
    // loop breaker: [0]
  */

rule (modulo E) C_Recv_Spontaneous:
   [
   State( ~cid, 'C1', $C, $S, 'client', auth_status ),
   TLS_Recv( ~cid, $S, $C,
             <<'11', pk(ltkA)>, <'15', signature>, '20', verify_data>
   ),
   !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
   !Pk( $A, pk(ltkA) )
   ]
  --[
  C_Recv( ~cid ),
  Eq( verify(signature,
             <'ExportedAuthenticator', h(<hccs, pk(ltkA)>)>, pk(ltkA)),
      true
  ),
  Eq( verify_data,
      hmac(<fms, hccs, <'11', pk(ltkA)>, '15', signature>)
  ),
  Recv( $C, ms, 'client', <$A, pk(ltkA)> ),
  Instance( ~cid, $C, $S, 'client' ), TLS_Recvd( ms )
  ]->
   [ State( ~cid, 'C1', $C, $S, 'client', auth_status ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) C_Recv_Spontaneous:
     [
     State( ~cid, 'C1', $C, $S, 'client', auth_status ),
     TLS_Recv( ~cid, $S, $C,
               <<'11', pk(ltkA)>, <'15', signature>, '20', verify_data>
     ),
     !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms ),
     !Pk( $A, pk(ltkA) )
     ]
    --[
    C_Recv( ~cid ), Eq( z, true ),
    Eq( verify_data,
        hmac(<fms, hccs, <'11', pk(ltkA)>, '15', signature>)
    ),
    Recv( $C, ms, 'client', <$A, pk(ltkA)> ),
    Instance( ~cid, $C, $S, 'client' ), TLS_Recvd( ms )
    ]->
     [ State( ~cid, 'C1', $C, $S, 'client', auth_status ) ]
    variants (modulo AC)
    1. hccs  = hccs.22
       ltkA  = ltkA.23
       signature
             = sign(<'ExportedAuthenticator', h(<hccs.22, pk(ltkA.23)>)>,
                    ltkA.23)
       z     = true
    
    2. hccs  = hccs.24
       ltkA  = ltkA.25
       signature
             = signature.27
       z     = verify(signature.27,
                      <'ExportedAuthenticator', h(<hccs.24, pk(ltkA.25)>)>, pk(ltkA.25))
    // loop breaker: [0]
  */

rule (modulo E) S_0:
   [ Create_TLS_Channel( $C, cid, $S ), Fr( ~sid ), !Ltk( $S, ltkS ) ]
  --[ PreStart( ~sid, $S, $C, 'server' ) ]->
   [
   Create_TLS_Channel2( $C, cid, $S, ~sid, pk(ltkS) ),
   State( ~sid, 'S0', $S, $C, 'server', 'none' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_uni:
   [
   Create_TLS_Channel3( $C, cid, 'none', $S, ~sid, pk(ltkS) ),
   State( ~sid, 'S0', $S, $C, 'server', 'none' )
   ]
  --[ Start( ~sid, $S, $C, 'server' ), S1( ~sid ) ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', 'none' ),
   Create_TLS_Channel4( $C, cid, 'none', $S, ~sid, pk(ltkS), 'uni' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_bi:
   [
   Create_TLS_Channel3( $C, cid, pk(ltkC), $S, ~sid, pk(ltkS) ),
   State( ~sid, 'S0', $S, $C, 'server', 'none' ), !Pk( $C, pk(ltkC) )
   ]
  --[ Start( ~sid, $S, $C, 'server' ), S1( ~sid ) ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', 'auth' ),
   Create_TLS_Channel4( $C, cid, pk(ltkC), $S, ~sid, pk(ltkS), 'bi' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_Request:
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   !TLS_Channel( ms, TLS_transcript, auth_status, $C, cid, $S, ~sid ),
   Fr( ~certificate_request_context ), Fr( ~request_id )
   ]
  --[
  S_Req( ~sid, ~certificate_request_context ),
  Instance( ~sid, $S, $C, 'server' ),
  Requested( ~sid, $S, 'server',
             <'13', ~certificate_request_context, $certificate_extensions>
  ),
  TLS_Sent( ms )
  ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   TLS_Send( ~sid, $S, $C,
             <'13', ~certificate_request_context, $certificate_extensions>
   ),
   PendingReqI( ~request_id, ~sid, 'server',
                <'13', ~certificate_request_context, $certificate_extensions>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S_RecvReq:
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   TLS_Recv( ~sid, $C, $S,
             <'13', certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms ),
   Fr( ~request_id )
   ]
  --[
  S_RecvReq( ~sid ),
  RecvReq( $S, ms, 'server',
           <'13', certificate_request_context, $certificate_extensions>
  ),
  Instance( ~sid, $S, $C, 'server' ), TLS_Recvd( ms )
  ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   PendingReqR( ~request_id, ~sid, 'server',
                <'13', certificate_request_context, $certificate_extensions>
   )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) S_Send:
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   PendingReqR( ~request_id, ~sid, 'server',
                <'13', ~certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms ),
   !Ltk( $A, ltkA ), DelegateLtk( $S, ltkA )
   ]
  --[
  S_Send( ~sid ), Owns( $S, ms, 'server', <$A, ltkA> ),
  Instance( ~sid, $S, $C, 'server' ),
  Fulfil( ~sid, $S, 'server',
          <'13', ~certificate_request_context, $certificate_extensions>,
          <$A, ltkA>
  ),
  TLS_Sent( ms )
  ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   TLS_Send( ~sid, $S, $C,
             <<'11', ~certificate_request_context, pk(ltkA)>, 
              <'15', 
               sign(<'ExportedAuthenticator', 
                     h(<hccs, 
                        <'13', ~certificate_request_context, $certificate_extensions>, 
                        pk(ltkA)>)
                    >,
                    ltkA)
              >, 
              '20', 
              hmac(<fms, hccs, 
                    <'13', ~certificate_request_context, $certificate_extensions>, 
                    <'11', ~certificate_request_context, pk(ltkA)>, '15', 
                    sign(<'ExportedAuthenticator', 
                          h(<hccs, 
                             <'13', ~certificate_request_context, $certificate_extensions>, 
                             pk(ltkA)>)
                         >,
                         ltkA)
                   >)
             >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S_Recv:
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   TLS_Recv( ~sid, $C, $S,
             <<'11', certificate_request_context, pk(ltkA)>, <'15', signature>, 
              '20', verify_data>
   ),
   PendingReqI( ~request_id, ~sid, 'server',
                <'13', certificate_request_context, $certificate_extensions>
   ),
   !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms ),
   !Pk( $A, pk(ltkA) )
   ]
  --[
  S_Recv( ~sid ),
  Eq( verify(signature,
             <'ExportedAuthenticator', 
              h(<hccc, 
                 <'13', certificate_request_context, $certificate_extensions>, 
                 pk(ltkA)>)
             >,
             pk(ltkA)),
      true
  ),
  Eq( verify_data,
      hmac(<fmc, hccc, 
            <'13', certificate_request_context, $certificate_extensions>, 
            <'11', certificate_request_context, pk(ltkA)>, '15', signature>)
  ),
  Recv( $S, ms, 'server', <$A, pk(ltkA)> ),
  Fulfilled( ~sid, $S, 'server',
             <'13', certificate_request_context, $certificate_extensions>,
             <$A, pk(ltkA)>
  ),
  Instance( ~sid, $S, $C, 'server' ), TLS_Recvd( ms )
  ]->
   [ State( ~sid, 'S1', $S, $C, 'server', auth_status ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) S_Recv:
     [
     State( ~sid, 'S1', $S, $C, 'server', auth_status ),
     TLS_Recv( ~sid, $C, $S,
               <<'11', certificate_request_context, pk(ltkA)>, <'15', signature>, 
                '20', verify_data>
     ),
     PendingReqI( ~request_id, ~sid, 'server',
                  <'13', certificate_request_context, $certificate_extensions>
     ),
     !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms ),
     !Pk( $A, pk(ltkA) )
     ]
    --[
    S_Recv( ~sid ), Eq( z, true ),
    Eq( verify_data,
        hmac(<fmc, hccc, 
              <'13', certificate_request_context, $certificate_extensions>, 
              <'11', certificate_request_context, pk(ltkA)>, '15', signature>)
    ),
    Recv( $S, ms, 'server', <$A, pk(ltkA)> ),
    Fulfilled( ~sid, $S, 'server',
               <'13', certificate_request_context, $certificate_extensions>,
               <$A, pk(ltkA)>
    ),
    Instance( ~sid, $S, $C, 'server' ), TLS_Recvd( ms )
    ]->
     [ State( ~sid, 'S1', $S, $C, 'server', auth_status ) ]
    variants (modulo AC)
    1. $certificate_extensions
             = $certificate_extensions.34
       certificate_request_context
             = certificate_request_context.38
       hccc  = hccc.41
       ltkA  = ltkA.43
       signature
             = sign(<'ExportedAuthenticator', 
                     h(<hccc.41, 
                        <'13', certificate_request_context.38, $certificate_extensions.34
                        >, 
                        pk(ltkA.43)>)
                    >,
                    ltkA.43)
       z     = true
    
    2. $certificate_extensions
             = $certificate_extensions.36
       certificate_request_context
             = certificate_request_context.40
       hccc  = hccc.43
       ltkA  = ltkA.45
       signature
             = signature.47
       z     = verify(signature.47,
                      <'ExportedAuthenticator', 
                       h(<hccc.43, 
                          <'13', certificate_request_context.40, $certificate_extensions.36
                          >, 
                          pk(ltkA.45)>)
                      >,
                      pk(ltkA.45))
    // loop breaker: [0]
  */

rule (modulo E) S_Send_Spontaneous:
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms ),
   !Ltk( $A, ltkA ), DelegateLtk( $S, ltkA )
   ]
  --[
  S_Send( ~sid ), Owns( $S, ms, 'server', <$A, ltkA> ),
  Instance( ~sid, $S, $C, 'server' ), TLS_Sent( ms )
  ]->
   [
   State( ~sid, 'S1', $S, $C, 'server', auth_status ),
   TLS_Send( ~sid, $S, $C,
             <<'11', pk(ltkA)>, 
              <'15', sign(<'ExportedAuthenticator', h(<hccs, pk(ltkA)>)>, ltkA)
              >, 
              '20', 
              hmac(<fms, hccs, <'11', pk(ltkA)>, '15', 
                    sign(<'ExportedAuthenticator', h(<hccs, pk(ltkA)>)>, ltkA)>)
             >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma uniq_Start:
  all-traces
  "∀ tid actor1 actor2 peer1 peer2 role1 role2 #i #j.
    ((Start( tid, actor1, peer1, role1 ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    ((((#i = #j) ∧ (actor1 = actor2)) ∧ (peer1 = peer2)) ∧
     (role1 = role2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor1 actor2 peer1 peer2 role1 role2 #i #j.
  (Start( tid, actor1, peer1, role1 ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ((¬(#i = #j)) ∨
   (¬(actor1 = actor2)) ∨
   (¬(peer1 = peer2)) ∨
   (¬(role1 = role2)))"
*/
by sorry

lemma pre_tid_invariant [reuse]:
  all-traces
  "∀ tid actor peer role #i.
    (Start( tid, actor, peer, role ) @ #i) ⇒
    (∃ #j. (PreStart( tid, actor, peer, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role #i.
  (Start( tid, actor, peer, role ) @ #i)
 ∧
  ∀ #j. (PreStart( tid, actor, peer, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma tid_invariant [use_induction, reuse]:
  all-traces
  "∀ tid actor peer role #i.
    (Instance( tid, actor, peer, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, peer, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role #i.
  (Instance( tid, actor, peer, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, peer, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma one_prestart_per_tid [reuse]:
  all-traces
  "∀ tid actor actor2 peer peer2 role role2 #i #j.
    ((PreStart( tid, actor, peer, role ) @ #i) ∧
     (PreStart( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 peer peer2 role role2 #i #j.
  (PreStart( tid, actor, peer, role ) @ #i) ∧
  (PreStart( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma one_start_per_tid [reuse]:
  all-traces
  "∀ tid actor actor2 peer peer2 role role2 #i #j.
    ((Start( tid, actor, peer, role ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 peer peer2 role role2 #i #j.
  (Start( tid, actor, peer, role ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma send_recv [reuse]:
  all-traces
  "∀ ms #j.
    (TLS_Recvd( ms ) @ #j) ⇒ (∃ #i. (TLS_Sent( ms ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ ms #j.
  (TLS_Recvd( ms ) @ #j) ∧ ∀ #i. (TLS_Sent( ms ) @ #i) ⇒ ¬(#i < #j)"
*/
simplify
solve( TLS_Recvd( ms ) @ #j )
  case Adv_Recv_TLS
  solve( TLS_Recv( iid, from_host, to_host, msg ) ▶₀ #j )
    case Send_TLS_Channel_owner_case_01
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_02
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_03
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_04
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_05
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_06
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_07
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_08
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_09
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_10
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_11
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_12
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_13
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_14
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_15
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_16
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_17
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_18
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                            $S.1, sid
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_19
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_owner_case_20
    by solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~sid,
                            $S.1, sid.1
              ) ▶₂ #j )
  next
    case Send_TLS_Channel_target_case_01
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_02
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_03
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_04
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_05
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_06
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_07
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_08
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_09
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_10
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_11
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_12
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_13
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_14
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_15
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_16
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_17
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_18
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_19
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_20
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_21
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_22
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_23
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_24
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_25
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_26
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_27
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_28
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_29
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_30
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_31
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~iid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  next
    case Send_TLS_Channel_target_case_32
    solve( !TLS_Channel( ms, TLS_transcript, auth_status, $I, ~cid,
                         $S.1, sid
           ) ▶₂ #j )
      case Create_TLS_channel
      by contradiction
    qed
  qed
next
  case C_Recv
  solve( PreStart( ~cid, $C, $S, 'client' ) @ #j.2 )
    case C_0
    solve( !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms
           ) ▶₃ #j )
      case Create_TLS_channel_case_1
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_2
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_3
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_4
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    qed
  qed
next
  case C_RecvReq
  solve( !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms
         ) ▶₂ #j )
    case Create_TLS_channel_case_1
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_2
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_3
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_4
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_5
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_6
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_7
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  next
    case Create_TLS_channel_case_8
    solve( TLS_Recv( ~cid, $S, $C,
                     <'13', certificate_request_context, $certificate_extensions>
           ) ▶₁ #j )
      case Send_TLS_Channel_target_case_1
      by contradiction
    next
      case Send_TLS_Channel_target_case_2
      by contradiction
    qed
  qed
next
  case C_Recv_Spontaneous
  solve( PreStart( ~cid, $C, $S, 'client' ) @ #j.2 )
    case C_0
    solve( !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms
           ) ▶₂ #j )
      case Create_TLS_channel_case_1
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'11', pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_2
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'11', pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_3
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'11', pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_4
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'11', pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_target_case_1
        by contradiction
      next
        case Send_TLS_Channel_target_case_2
        by contradiction
      qed
    qed
  qed
next
  case S_Recv
  solve( PreStart( ~sid, $S, $C, 'server' ) @ #j.2 )
    case S_0
    solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
           ) ▶₃ #j )
      case Create_TLS_channel_case_1
      solve( TLS_Recv( ~sid, $C, $S,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_clientauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_clientauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_owner
        by contradiction
      qed
    next
      case Create_TLS_channel_case_2
      solve( TLS_Recv( ~sid, $C, $S,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_clientauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_clientauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_3
      solve( TLS_Recv( ~sid, $C, $S,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_clientauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_clientauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_owner
        by contradiction
      qed
    next
      case Create_TLS_channel_case_4
      solve( TLS_Recv( ~sid, $C, $S,
                       <<'11', certificate_request_context, pk(ltkA)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_clientauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkA)>)
                              >,
                              ltkA)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkA)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_clientauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkA)>)
                                   >,
                                   ltkA)
                             >)
                       >
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    qed
  qed
next
  case S_RecvReq
  solve( PreStart( ~sid, $S, $C, 'server' ) @ #j.2 )
    case S_0
    solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
           ) ▶₂ #j )
      case Create_TLS_channel_case_1
      solve( TLS_Recv( ~sid, $C, $S,
                       <'13', certificate_request_context, $certificate_extensions>
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_2
      solve( TLS_Recv( ~sid, $C, $S,
                       <'13', certificate_request_context, $certificate_extensions>
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_3
      solve( TLS_Recv( ~sid, $C, $S,
                       <'13', certificate_request_context, $certificate_extensions>
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    next
      case Create_TLS_channel_case_4
      solve( TLS_Recv( ~sid, $C, $S,
                       <'13', certificate_request_context, $certificate_extensions>
             ) ▶₁ #j )
        case Send_TLS_Channel_owner_case_1
        by contradiction
      next
        case Send_TLS_Channel_owner_case_2
        by contradiction
      qed
    qed
  qed
qed

lemma good_start [typing]:
  all-traces
  "∀ tid #j.
    (C_RecvReq( tid ) @ #j) ⇒
    (¬(∃ actor peer role #i. StartI( tid, actor, peer, role ) @ #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid #j.
  (C_RecvReq( tid ) @ #j)
 ∧
  ∃ actor peer role #i. (StartI( tid, actor, peer, role ) @ #i)"
*/
by sorry

lemma constant_peer [reuse]:
  all-traces
  "∀ tid actor actor2 peer peer2 role role2 #i #j.
    ((Instance( tid, actor, peer, role ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (((actor = actor2) ∧ (peer = peer2)) ∧ (role = role2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 peer peer2 role role2 #i #j.
  (Instance( tid, actor, peer, role ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ((¬(actor = actor2)) ∨ (¬(peer = peer2)) ∨ (¬(role = role2)))"
*/
by sorry

lemma consistent_nonce [reuse]:
  all-traces
  "∀ tid actor peer role actor2 peer2 role2 #i #j.
    ((Instance( tid, actor, peer, role ) @ #i) ∧
     (Instance( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (((actor = actor2) ∧ (peer = peer2)) ∧ (role = role2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role actor2 peer2 role2 #i #j.
  (Instance( tid, actor, peer, role ) @ #i) ∧
  (Instance( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ((¬(actor = actor2)) ∨ (¬(peer = peer2)) ∨ (¬(role = role2)))"
*/
by sorry

lemma reachable_session_keys:
  exists-trace
  "∃ ms transcript #i. SessionKey( ms, transcript ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ ms transcript #i. (SessionKey( ms, transcript ) @ #i)"
*/
by sorry

lemma secret_session_keys:
  all-traces
  "∀ ms transcript #i.
    (SessionKey( ms, transcript ) @ #i) ⇒
    ((¬(∃ #j. K( ms ) @ #j)) ∧ (¬(∃ #k. K( transcript ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ ms transcript #i.
  (SessionKey( ms, transcript ) @ #i)
 ∧
  ((∃ #j. (K( ms ) @ #j)) ∨ (∃ #k. (K( transcript ) @ #k)))"
*/
by sorry

lemma cert_ownership [reuse]:
  all-traces
  "∀ actor ms ltkD del role #k.
    (Recv( actor, ms, role, <del, pk(ltkD)> ) @ #k) ⇒
    ((∃ peer role2 #i.
       ((Owns( peer, ms, role2, <del, ltkD> ) @ #i) ∧ (#i < #k)) ∧
       (¬(role = role2))) ∨
     (∃ #j. (RevLtk( del ) @ #j) ∧ (#j < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ms ltkD del role #k.
  (Recv( actor, ms, role, <del, pk(ltkD)> ) @ #k)
 ∧
  (∀ peer role2 #i.
    (Owns( peer, ms, role2, <del, ltkD> ) @ #i)
   ⇒
    ((¬(#i < #k)) ∨ (role = role2))) ∧
  (∀ #j. (RevLtk( del ) @ #j) ⇒ ¬(#j < #k))"
*/
simplify
solve( Recv( actor, ms, role, <del, pk(ltkD)> ) @ #k )
  case C_Recv
  solve( PreStart( ~cid, $C, $S, 'client' ) @ #j.1 )
    case C_0
    solve( !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms
           ) ▶₃ #k )
      case Create_TLS_channel_case_1
      solve( TLS_Recv( ~cid, $S, $C,
                       <<'11', certificate_request_context, pk(ltkD)>, 
                        <'15', 
                         sign(<'ExportedAuthenticator', 
                               h(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'13', certificate_request_context, $certificate_extensions>, 
                                  pk(ltkD)>)
                              >,
                              ltkD)
                        >, 
                        '20', 
                        hmac(<
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                              <'13', certificate_request_context, $certificate_extensions>, 
                              <'11', certificate_request_context, pk(ltkD)>, '15', 
                              sign(<'ExportedAuthenticator', 
                                    h(<
                                       Expand(Expand(Expand(~n,
                                                            <'32', 'TLS13exportermastersecret', 
                                                             h(~n.1)>,
                                                            '32'),
                                                     <'32', 
                                                      'EXPORTER_serverauthenticatorhandshakecontext', 
                                                      'empty'>,
                                                     '32'),
                                              <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                       <'13', certificate_request_context, $certificate_extensions
                                       >, 
                                       pk(ltkD)>)
                                   >,
                                   ltkD)
                             >)
                       >
             ) ▶₁ #k )
        case Send_TLS_Channel_target_case_1
        solve( !Pk( $A, pk(ltkD) ) ▶₄ #k )
          case Register_pk
          solve( !KU( sign(<'ExportedAuthenticator', 
                            h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               <'13', certificate_request_context, $certificate_extensions>, 
                               pk(~ltk)>)
                           >,
                           ~ltk)
                 ) @ #vk.11 )
            case Adv_Recv_TLS
            by contradiction /* from formulas */
          next
            case csign
            solve( !KU( ~ltk ) @ #vk.16 )
              case Adv_1_Bi_case_1
              solve( PendingReqI( ~request_id, ~cid, 'client',
                                  <'13', certificate_request_context, $certificate_extensions>
                     ) ▶₂ #k )
                case C_Request
                solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
                  case C_1_uni
                  solve( !KU( h(<
                                 Expand(Expand(Expand(~n,
                                                      <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                      '32'),
                                               <'32', 
                                                'EXPORTER_serverauthenticatorhandshakecontext', 
                                                'empty'>,
                                               '32'),
                                        <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                 <'13', ~certificate_request_context, $certificate_extensions>, 
                                 pk(~ltk)>)
                         ) @ #vk.18 )
                    case ch
                    solve( !KU( Expand(Expand(Expand(~n,
                                                     <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                     '32'),
                                              <'32', 
                                               'EXPORTER_serverauthenticatorhandshakecontext', 
                                               'empty'>,
                                              '32'),
                                       <'32', 'exporter', h(<'empty', '32'>)>, '32')
                           ) @ #vk.22 )
                      case cExpand
                      solve( !KU( Expand(Expand(~n,
                                                <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                         <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                          'empty'>,
                                         '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( Expand(~n,
                                           <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                               ) @ #vk.33 )
                          case cExpand
                          solve( !KU( ~n ) @ #vk.38 )
                            case Adv_Recv_TLS_case_1
                            solve( Start( ~sid, $S.2, $I, 'server' ) @ #j.2 )
                              case S_1_bi
                              solve( !Pk( $I, pk(ltkC) ) ▶₂ #j.2 )
                                case Register_pk
                                by solve( Create_TLS_Channel3( $I, cid.1, pk(~ltk.3), $S.1, ~sid,
                                                               pk(ltkS)
                                          ) ▶₀ #j.2 )
                              qed
                            next
                              case S_1_uni
                              by solve( Create_TLS_Channel3( $I, cid.1, 'none', $S.1, ~sid,
                                                             pk(ltkS)
                                        ) ▶₀ #j.2 )
                            qed
                          next
                            case Adv_Recv_TLS_case_2
                            solve( PreStart( ~cid.1, $I, $S.2, 'client' ) @ #vr.27 )
                              case C_0
                              by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                            qed
                          next
                            case Adv_Recv_TLS_case_3
                            by solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_4
                            solve( PreStart( ~cid.1, $I, $S.2, 'client' ) @ #vr.28 )
                              case C_0
                              by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                            qed
                          next
                            case Adv_Recv_TLS_case_5
                            solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #vr.26 )
                              case S_0
                              solve( Start( ~sid, $S.1, $I, 'server' ) @ #vr.22 )
                                case S_1_uni
                                solve( !KU( ~certificate_request_context ) @ #vk.17 )
                                  case Adv_Recv_TLS_case_1
                                  solve( Start( ~sid.1, $S.3, $I.1, 'server' ) @ #j.2 )
                                    case S_1_bi
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, pk(ltkC), $S.2,
                                                                   ~sid, pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  next
                                    case S_1_uni
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, 'none', $S.2, ~sid,
                                                                   pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  qed
                                next
                                  case Adv_Recv_TLS_case_2
                                  solve( Start( ~sid.1, $S.3, $I.1, 'server' ) @ #j.2 )
                                    case S_1_bi
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, pk(ltkC), $S.2,
                                                                   ~sid, pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  next
                                    case S_1_uni
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, 'none', $S.2, ~sid,
                                                                   pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  qed
                                next
                                  case Adv_Recv_TLS_case_3
                                  solve( Start( ~sid.1, $S.3, $I.1, 'server' ) @ #j.2 )
                                    case S_1_bi
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, pk(ltkC), $S.2,
                                                                   ~sid, pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  next
                                    case S_1_uni
                                    by solve( Create_TLS_Channel3( $I.1, cid.1, 'none', $S.2, ~sid,
                                                                   pk(ltkS)
                                              ) ▶₀ #j.2 )
                                  qed
                                next
                                  case Adv_Recv_TLS_case_4
                                  solve( PreStart( ~cid.1, $I.1, $S.3, 'client' ) @ #vr.44 )
                                    case C_0
                                    by solve( PreStart( ~sid.1, $S.2, $I.1, 'server' ) @ #j.3 )
                                  qed
                                next
                                  case Adv_Recv_TLS_case_5
                                  solve( Start( ~sid.1, $S.3, $I.1, 'server' ) @ #vr.38 )
                                    case S_1_uni
                                    solve( PreStart( ~sid.1, $S.2, $I.1, 'server' ) @ #vr.42 )
                                      case S_0
                                      solve( TLS_Recv( ~sid, $I, $S.1,
                                                       <'13', ~n, $certificate_extensions.1>
                                             ) ▶₁ #vr.23 )
                                        case Send_TLS_Channel_owner
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Adv_Recv_TLS_case_6
                                  solve( TLS_Recv( ~sid, $I, $S.1,
                                                   <'13', ~n, $certificate_extensions.1>
                                         ) ▶₁ #vr.23 )
                                    case Send_TLS_Channel_owner
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Adv_Recv_TLS_case_7
                                  solve( TLS_Recv( ~sid, $I, $S.1,
                                                   <'13', ~n, $certificate_extensions.1>
                                         ) ▶₁ #vr.23 )
                                    case Send_TLS_Channel_owner
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Adv_Recv_TLS_case_8
                                  solve( TLS_Recv( ~sid, $I, $S.1,
                                                   <'13', ~n, $certificate_extensions.1>
                                         ) ▶₁ #vr.23 )
                                    case Send_TLS_Channel_owner
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Adv_Recv_TLS_case_6
                            solve( TLS_Recv( ~sid, $I, $S.2,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.23 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_7
                            solve( TLS_Recv( ~sid, $I, $S.2,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.23 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_8
                            solve( TLS_Recv( ~sid, $I, $S.2,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.23 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Adv_1_Bi_case_2
              solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
                case C_1_uni
                solve( PendingReqI( ~request_id, ~cid, 'client',
                                    <'13', certificate_request_context, $certificate_extensions>
                       ) ▶₂ #k )
                  case C_Request
                  solve( !KU( ~certificate_request_context ) @ #vk.10 )
                    case Adv_Recv_TLS_case_1
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_2
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner_case_1
                      by contradiction /* cyclic */
                    next
                      case Send_TLS_Channel_owner_case_2
                      solve( Start( ~iid, $S, $C, 'server' ) @ #j.2 )
                        case S_1_bi
                        by solve( Create_TLS_Channel3( $C, cid.1, pk(ltkC), $S, ~iid,
                                                       pk(ltkS)
                                  ) ▶₀ #j.2 )
                      next
                        case S_1_uni
                        by solve( Create_TLS_Channel3( $C, cid.1, 'none', $S, ~iid,
                                                       pk(ltkS)
                                  ) ▶₀ #j.2 )
                      qed
                    qed
                  next
                    case Adv_Recv_TLS_case_3
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_4
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( TLS_Recv( ~sid.1, $I, $S.2,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.23 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Adv_Recv_TLS_case_1
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_2
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_3
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_4
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_5
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_6
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_7
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_8
              solve( TLS_Recv( ~sid, $I, $S.1,
                               <'13', ~ltk, $certificate_extensions.1>
                     ) ▶₁ #vr.17 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Create_Adv_TLS_channel1_case_1
              solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
                case C_1_uni
                solve( PendingReqI( ~request_id, ~cid, 'client',
                                    <'13', certificate_request_context, $certificate_extensions>
                       ) ▶₂ #k )
                  case C_Request
                  solve( !KU( ~certificate_request_context ) @ #vk.10 )
                    case Adv_Recv_TLS_case_1
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_2
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner_case_1
                      by contradiction /* cyclic */
                    next
                      case Send_TLS_Channel_owner_case_2
                      by solve( PreStart( ~sid, $S, $C, 'server' ) @ #j.3 )
                    qed
                  next
                    case Adv_Recv_TLS_case_3
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_4
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( TLS_Recv( ~sid, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Create_Adv_TLS_channel1_case_2
              solve( PendingReqI( ~request_id, ~cid, 'client',
                                  <'13', certificate_request_context, $certificate_extensions>
                     ) ▶₂ #k )
                case C_Request
                solve( !KU( ~certificate_request_context ) @ #vk.10 )
                  case Adv_Recv_TLS_case_1
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_2
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner_case_1
                    by contradiction /* cyclic */
                  next
                    case Send_TLS_Channel_owner_case_2
                    by solve( PreStart( ~sid, $S, $C, 'server' ) @ #j.3 )
                  qed
                next
                  case Adv_Recv_TLS_case_3
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_4
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_5
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_6
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_7
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_8
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.22 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Send_TLS_Channel_target_case_2
        solve( TLS_Recv( ~iid, $C, $S,
                         <'13', ~certificate_request_context, $certificate_extensions>
               ) ▶₁ #vr.6 )
          case Send_TLS_Channel_owner_case_1
          solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
            case C_1_uni
            by solve( PreStart( ~iid, $S, $C, 'server' ) @ #j.3 )
          qed
        next
          case Send_TLS_Channel_owner_case_2
          by solve( PreStart( ~iid, $S, $C, 'server' ) @ #j.3 )
        qed
      qed
    next
      case Create_TLS_channel_case_2
      solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
        case C_1_bi
        solve( PendingReqI( ~request_id, ~cid, 'client',
                            <'13', certificate_request_context, $certificate_extensions>
               ) ▶₂ #k )
          case C_Request
          solve( !Pk( $A, pk(ltkD) ) ▶₄ #k )
            case Register_pk
            solve( TLS_Recv( ~cid, $S, $C,
                             <<'11', ~certificate_request_context, pk(~ltk)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~n,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n.1)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_serverauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        <'13', ~certificate_request_context, $certificate_extensions
                                        >, 
                                        pk(~ltk)>)
                                    >,
                                    ~ltk)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_serverauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'13', ~certificate_request_context, $certificate_extensions>, 
                                    <'11', ~certificate_request_context, pk(~ltk)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~n,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n.1)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_serverauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             <'13', ~certificate_request_context, 
                                              $certificate_extensions>, 
                                             pk(~ltk)>)
                                         >,
                                         ~ltk)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_target_case_1
              solve( !KU( ~certificate_request_context ) @ #vk.6 )
                case Adv_Recv_TLS_case_1
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.19 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_6
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.19 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_7
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.19 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_8
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.19 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Send_TLS_Channel_target_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Create_TLS_channel_case_3
      solve( PreStart( ~sid, $S, $C, 'server' ) @ #vr.2 )
        case S_0
        solve( PendingReqI( ~request_id, ~cid, 'client',
                            <'13', certificate_request_context, $certificate_extensions>
               ) ▶₂ #k )
          case C_Request
          solve( !Pk( $A, pk(ltkD) ) ▶₄ #k )
            case Register_pk
            solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
              case C_1_uni
              solve( TLS_Recv( ~cid, $S, $C,
                               <<'11', ~certificate_request_context, pk(~ltk)>, 
                                <'15', 
                                 sign(<'ExportedAuthenticator', 
                                       h(<
                                          Expand(Expand(Expand(~n,
                                                               <'32', 'TLS13exportermastersecret', 
                                                                h(~n.1)>,
                                                               '32'),
                                                        <'32', 
                                                         'EXPORTER_serverauthenticatorhandshakecontext', 
                                                         'empty'>,
                                                        '32'),
                                                 <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                          <'13', ~certificate_request_context, 
                                           $certificate_extensions>, 
                                          pk(~ltk)>)
                                      >,
                                      ~ltk)
                                >, 
                                '20', 
                                hmac(<
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorfinishedkey', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      <'13', ~certificate_request_context, $certificate_extensions
                                      >, 
                                      <'11', ~certificate_request_context, pk(~ltk)>, '15', 
                                      sign(<'ExportedAuthenticator', 
                                            h(<
                                               Expand(Expand(Expand(~n,
                                                                    <'32', 
                                                                     'TLS13exportermastersecret', 
                                                                     h(~n.1)>,
                                                                    '32'),
                                                             <'32', 
                                                              'EXPORTER_serverauthenticatorhandshakecontext', 
                                                              'empty'>,
                                                             '32'),
                                                      <'32', 'exporter', h(<'empty', '32'>)>,
                                                      '32'), 
                                               <'13', ~certificate_request_context, 
                                                $certificate_extensions>, 
                                               pk(~ltk)>)
                                           >,
                                           ~ltk)
                                     >)
                               >
                     ) ▶₁ #k )
                case Send_TLS_Channel_target_case_1
                solve( !KU( ~certificate_request_context ) @ #vk.6 )
                  case Adv_Recv_TLS_case_1
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_2
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_3
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_4
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_5
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_6
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner_case_1
                    by contradiction /* cyclic */
                  next
                    case Send_TLS_Channel_owner_case_2
                    solve( !KU( ~sid ) @ #vk.3 )
                      case Adv_Recv_TLS_case_1
                      by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                    next
                      case Adv_Recv_TLS_case_2
                      by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                    next
                      case Adv_Recv_TLS_case_3
                      by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                    next
                      case Adv_Recv_TLS_case_4
                      by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                    next
                      case Adv_Recv_TLS_case_5
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~sid, $certificate_extensions.1>
                             ) ▶₁ #vr.29 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    next
                      case Adv_Recv_TLS_case_6
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~sid, $certificate_extensions.1>
                             ) ▶₁ #vr.29 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    next
                      case Adv_Recv_TLS_case_7
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~sid, $certificate_extensions.1>
                             ) ▶₁ #vr.29 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    next
                      case Adv_Recv_TLS_case_8
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~sid, $certificate_extensions.1>
                             ) ▶₁ #vr.29 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Adv_Recv_TLS_case_7
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_8
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Send_TLS_Channel_target_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case Create_TLS_channel_case_4
      solve( PreStart( ~sid, $S, $C, 'server' ) @ #vr.2 )
        case S_0
        solve( PendingReqI( ~request_id, ~cid, 'client',
                            <'13', certificate_request_context, $certificate_extensions>
               ) ▶₂ #k )
          case C_Request
          solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
            case C_1_bi
            solve( TLS_Recv( ~cid, $S, $C,
                             <<'11', ~certificate_request_context, pk(ltkD)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~n,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n.1)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_serverauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        <'13', ~certificate_request_context, $certificate_extensions
                                        >, 
                                        pk(ltkD)>)
                                    >,
                                    ltkD)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_serverauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'13', ~certificate_request_context, $certificate_extensions>, 
                                    <'11', ~certificate_request_context, pk(ltkD)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~n,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n.1)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_serverauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             <'13', ~certificate_request_context, 
                                              $certificate_extensions>, 
                                             pk(ltkD)>)
                                         >,
                                         ltkD)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_target_case_1
              solve( !KU( ~certificate_request_context ) @ #vk.6 )
                case Adv_Recv_TLS_case_1
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_6
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_7
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_8
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner_case_1
                  by contradiction /* cyclic */
                next
                  case Send_TLS_Channel_owner_case_2
                  solve( !KU( ~sid ) @ #vk.3 )
                    case Adv_Recv_TLS_case_1
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_2
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_3
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_4
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~sid, $certificate_extensions.1>
                           ) ▶₁ #vr.29 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~sid, $certificate_extensions.1>
                           ) ▶₁ #vr.29 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~sid, $certificate_extensions.1>
                           ) ▶₁ #vr.29 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~sid, $certificate_extensions.1>
                           ) ▶₁ #vr.29 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Send_TLS_Channel_target_case_2
              solve( TLS_Recv( ~sid, $C, $S,
                               <'13', ~certificate_request_context, $certificate_extensions>
                     ) ▶₁ #vr.8 )
                case Send_TLS_Channel_owner_case_1
                solve( Start( ~sid, $S, $C, 'server' ) @ #vr.1 )
                  case S_1_bi
                  solve( !KU( ~certificate_request_context ) @ #vk.5 )
                    case Adv_Recv_TLS_case_1
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_2
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_3
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_4
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.22 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.25 )
                      case S_0
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~certificate_request_context, 
                                        $certificate_extensions.1>
                             ) ▶₁ #vr.22 )
                        case Send_TLS_Channel_owner_case_1
                        by contradiction /* cyclic */
                      next
                        case Send_TLS_Channel_owner_case_2
                        solve( !KU( ~cid ) @ #vk.4 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.36 )
                            case S_0
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~cid, $certificate_extensions.1>
                                   ) ▶₁ #vr.33 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid.1, $I, $S.1,
                                           <'13', ~cid, $certificate_extensions.1>
                                 ) ▶₁ #vr.33 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( !Pk( $A, pk(~ltk) ) ▶₄ #k )
                            case Register_pk
                            by contradiction /* from formulas */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( TLS_Recv( ~sid.1, $I, $S.1,
                                           <'13', ~cid, $certificate_extensions.1>
                                 ) ▶₁ #vr.33 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Send_TLS_Channel_owner_case_2
                solve( !Pk( $A, pk(~ltk) ) ▶₄ #k )
                  case Register_pk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case C_Recv_Spontaneous
  solve( !Pk( $A, pk(ltkD) ) ▶₃ #k )
    case Register_pk
    solve( PreStart( ~cid, $C, $S, 'client' ) @ #j.1 )
      case C_0
      solve( !Exporters( ms, 'client', ~cid, hccc, hccs, fmc, fms
             ) ▶₂ #k )
        case Create_TLS_channel_case_1
        solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
          case C_1_uni
          solve( TLS_Recv( ~cid, $S, $C,
                           <<'11', pk(~ltk)>, 
                            <'15', 
                             sign(<'ExportedAuthenticator', 
                                   h(<
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      pk(~ltk)>)
                                  >,
                                  ~ltk)
                            >, 
                            '20', 
                            hmac(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'11', pk(~ltk)>, '15', 
                                  sign(<'ExportedAuthenticator', 
                                        h(<
                                           Expand(Expand(Expand(~n,
                                                                <'32', 'TLS13exportermastersecret', 
                                                                 h(~n.1)>,
                                                                '32'),
                                                         <'32', 
                                                          'EXPORTER_serverauthenticatorhandshakecontext', 
                                                          'empty'>,
                                                         '32'),
                                                  <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                           pk(~ltk)>)
                                       >,
                                       ~ltk)
                                 >)
                           >
                 ) ▶₁ #k )
            case Send_TLS_Channel_target_case_1
            solve( !KU( sign(<'ExportedAuthenticator', 
                              h(<
                                 Expand(Expand(Expand(~n,
                                                      <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                      '32'),
                                               <'32', 
                                                'EXPORTER_serverauthenticatorhandshakecontext', 
                                                'empty'>,
                                               '32'),
                                        <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                 pk(~ltk)>)
                             >,
                             ~ltk)
                   ) @ #vk.9 )
              case Adv_Recv_TLS
              by contradiction /* from formulas */
            next
              case csign
              solve( !KU( ~ltk ) @ #vk.14 )
                case Adv_1_Bi_case_1
                solve( !KU( h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               pk(~ltk)>)
                       ) @ #vk.16 )
                  case ch
                  solve( !KU( Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32')
                         ) @ #vk.18 )
                    case cExpand
                    solve( !KU( Expand(Expand(~n,
                                              <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                        'empty'>,
                                       '32')
                           ) @ #vk.19 )
                      case cExpand
                      solve( !KU( Expand(~n,
                                         <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( ~n ) @ #vk.31 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( TLS_Recv( ~sid, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( TLS_Recv( ~sid, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( PreStart( ~sid, $S.2, $I, 'server' ) @ #vr.25 )
                            case S_0
                            solve( PreStart( ~cid.1, $I, $S.1, 'client' ) @ #vr.27 )
                              case C_0
                              solve( TLS_Recv( ~sid, $I, $S.1,
                                               <'13', ~n, $certificate_extensions>
                                     ) ▶₁ #vr.22 )
                                case Send_TLS_Channel_owner
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Adv_1_Bi_case_2
                solve( !KU( h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               pk(~ltk)>)
                       ) @ #vk.16 )
                  case ch
                  solve( !KU( Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32')
                         ) @ #vk.18 )
                    case cExpand
                    solve( !KU( Expand(Expand(~n,
                                              <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                        'empty'>,
                                       '32')
                           ) @ #vk.19 )
                      case cExpand
                      solve( !KU( Expand(~n,
                                         <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( ~n ) @ #vk.31 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid.1, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid.1, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid.1, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid.1, $S.2, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( TLS_Recv( ~sid.1, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid.1, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( TLS_Recv( ~sid.1, $I, $S.2,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.22 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( PreStart( ~cid.1, $I, $S.2, 'client' ) @ #vr.27 )
                            case C_0
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions>
                                   ) ▶₁ #vr.22 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Adv_Recv_TLS_case_1
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~ltk, $certificate_extensions>
                       ) ▶₁ #vr.17 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_6
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~ltk, $certificate_extensions>
                       ) ▶₁ #vr.17 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_7
                solve( TLS_Recv( ~sid, $I, $S.1,
                                 <'13', ~ltk, $certificate_extensions>
                       ) ▶₁ #vr.17 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_8
                solve( PreStart( ~cid.1, $I, $S.1, 'client' ) @ #vr.22 )
                  case C_0
                  solve( TLS_Recv( ~sid, $I, $S.1,
                                   <'13', ~ltk, $certificate_extensions>
                         ) ▶₁ #vr.17 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Create_Adv_TLS_channel1_case_1
                solve( !KU( h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               pk(~ltk)>)
                       ) @ #vk.16 )
                  case ch
                  solve( !KU( Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32')
                         ) @ #vk.18 )
                    case cExpand
                    solve( !KU( Expand(Expand(~n,
                                              <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                        'empty'>,
                                       '32')
                           ) @ #vk.19 )
                      case cExpand
                      solve( !KU( Expand(~n,
                                         <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( ~n ) @ #vk.31 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #vr.24 )
                            case S_0
                            solve( TLS_Recv( ~sid, $I, $S.1,
                                             <'13', ~n, $certificate_extensions>
                                   ) ▶₁ #vr.21 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Create_Adv_TLS_channel1_case_2
                solve( !KU( h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               pk(~ltk)>)
                       ) @ #vk.16 )
                  case ch
                  solve( !KU( Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32')
                         ) @ #vk.18 )
                    case cExpand
                    solve( !KU( Expand(Expand(~n,
                                              <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                        'empty'>,
                                       '32')
                           ) @ #vk.19 )
                      case cExpand
                      solve( !KU( Expand(~n,
                                         <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( ~n ) @ #vk.31 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.21 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #vr.24 )
                            case S_0
                            solve( TLS_Recv( ~sid, $I, $S.1,
                                             <'13', ~n, $certificate_extensions>
                                   ) ▶₁ #vr.21 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case Send_TLS_Channel_target_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case Create_TLS_channel_case_2
        solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
          case C_1_bi
          solve( TLS_Recv( ~cid, $S, $C,
                           <<'11', pk(~ltk)>, 
                            <'15', 
                             sign(<'ExportedAuthenticator', 
                                   h(<
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      pk(~ltk)>)
                                  >,
                                  ~ltk)
                            >, 
                            '20', 
                            hmac(<
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  Expand(Expand(Expand(~n,
                                                       <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                       '32'),
                                                <'32', 
                                                 'EXPORTER_serverauthenticatorhandshakecontext', 
                                                 'empty'>,
                                                '32'),
                                         <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                  <'11', pk(~ltk)>, '15', 
                                  sign(<'ExportedAuthenticator', 
                                        h(<
                                           Expand(Expand(Expand(~n,
                                                                <'32', 'TLS13exportermastersecret', 
                                                                 h(~n.1)>,
                                                                '32'),
                                                         <'32', 
                                                          'EXPORTER_serverauthenticatorhandshakecontext', 
                                                          'empty'>,
                                                         '32'),
                                                  <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                           pk(~ltk)>)
                                       >,
                                       ~ltk)
                                 >)
                           >
                 ) ▶₁ #k )
            case Send_TLS_Channel_target_case_1
            solve( !KU( sign(<'ExportedAuthenticator', 
                              h(<
                                 Expand(Expand(Expand(~n,
                                                      <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                      '32'),
                                               <'32', 
                                                'EXPORTER_serverauthenticatorhandshakecontext', 
                                                'empty'>,
                                               '32'),
                                        <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                 pk(~ltk)>)
                             >,
                             ~ltk)
                   ) @ #vk.9 )
              case Adv_Recv_TLS
              by contradiction /* from formulas */
            next
              case csign
              solve( !KU( h(<
                             Expand(Expand(Expand(~n,
                                                  <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                  '32'),
                                           <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                            'empty'>,
                                           '32'),
                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                             pk(~ltk)>)
                     ) @ #vk.16 )
                case ch
                solve( !KU( Expand(Expand(Expand(~n,
                                                 <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                 '32'),
                                          <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                           'empty'>,
                                          '32'),
                                   <'32', 'exporter', h(<'empty', '32'>)>, '32')
                       ) @ #vk.18 )
                  case cExpand
                  solve( !KU( Expand(Expand(~n,
                                            <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                     <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'
                                     >,
                                     '32')
                         ) @ #vk.19 )
                    case cExpand
                    solve( !KU( Expand(~n,
                                       <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                           ) @ #vk.26 )
                      case cExpand
                      solve( !KU( ~n ) @ #vk.31 )
                        case Adv_Recv_TLS_case_1
                        by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                      next
                        case Adv_Recv_TLS_case_2
                        by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                      next
                        case Adv_Recv_TLS_case_3
                        by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                      next
                        case Adv_Recv_TLS_case_4
                        by solve( PreStart( ~sid, $S.1, $I, 'server' ) @ #j.3 )
                      next
                        case Adv_Recv_TLS_case_5
                        solve( TLS_Recv( ~sid, $I, $S.1,
                                         <'13', ~n, $certificate_extensions>
                               ) ▶₁ #vr.18 )
                          case Send_TLS_Channel_owner
                          by contradiction /* cyclic */
                        qed
                      next
                        case Adv_Recv_TLS_case_6
                        solve( TLS_Recv( ~sid, $I, $S.1,
                                         <'13', ~n, $certificate_extensions>
                               ) ▶₁ #vr.18 )
                          case Send_TLS_Channel_owner
                          by contradiction /* cyclic */
                        qed
                      next
                        case Adv_Recv_TLS_case_7
                        solve( TLS_Recv( ~sid, $I, $S.1,
                                         <'13', ~n, $certificate_extensions>
                               ) ▶₁ #vr.18 )
                          case Send_TLS_Channel_owner
                          by contradiction /* cyclic */
                        qed
                      next
                        case Adv_Recv_TLS_case_8
                        solve( PreStart( ~cid.1, $I, $S.1, 'client' ) @ #vr.23 )
                          case C_0
                          solve( TLS_Recv( ~sid, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.18 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Send_TLS_Channel_target_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case Create_TLS_channel_case_3
        solve( PreStart( ~sid, $S, $C, 'server' ) @ #vr.3 )
          case S_0
          solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
            case C_1_uni
            solve( TLS_Recv( ~cid, $S, $C,
                             <<'11', pk(~ltk)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~n,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n.1)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_serverauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        pk(~ltk)>)
                                    >,
                                    ~ltk)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_serverauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'11', pk(~ltk)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~n,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n.1)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_serverauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             pk(~ltk)>)
                                         >,
                                         ~ltk)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_target_case_1
              solve( !KU( sign(<'ExportedAuthenticator', 
                                h(<
                                   Expand(Expand(Expand(~n,
                                                        <'32', 'TLS13exportermastersecret', h(~n.1)
                                                        >,
                                                        '32'),
                                                 <'32', 
                                                  'EXPORTER_serverauthenticatorhandshakecontext', 
                                                  'empty'>,
                                                 '32'),
                                          <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                   pk(~ltk)>)
                               >,
                               ~ltk)
                     ) @ #vk.9 )
                case Adv_Recv_TLS
                by contradiction /* from formulas */
              next
                case csign
                solve( !KU( h(<
                               Expand(Expand(Expand(~n,
                                                    <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                    '32'),
                                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                              'empty'>,
                                             '32'),
                                      <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                               pk(~ltk)>)
                       ) @ #vk.16 )
                  case ch
                  solve( !KU( Expand(Expand(Expand(~n,
                                                   <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                   '32'),
                                            <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                             'empty'>,
                                            '32'),
                                     <'32', 'exporter', h(<'empty', '32'>)>, '32')
                         ) @ #vk.18 )
                    case cExpand
                    solve( !KU( Expand(Expand(~n,
                                              <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 
                                        'empty'>,
                                       '32')
                           ) @ #vk.19 )
                      case cExpand
                      solve( !KU( Expand(~n,
                                         <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( ~n ) @ #vk.31 )
                          case Adv_Recv_TLS_case_1
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_2
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_3
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_4
                          by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                        next
                          case Adv_Recv_TLS_case_5
                          solve( TLS_Recv( ~sid.1, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.17 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_6
                          solve( TLS_Recv( ~sid.1, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.17 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_7
                          solve( TLS_Recv( ~sid.1, $I, $S.1,
                                           <'13', ~n, $certificate_extensions>
                                 ) ▶₁ #vr.17 )
                            case Send_TLS_Channel_owner
                            by contradiction /* cyclic */
                          qed
                        next
                          case Adv_Recv_TLS_case_8
                          solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.20 )
                            case S_0
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions>
                                   ) ▶₁ #vr.17 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Send_TLS_Channel_target_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case Create_TLS_channel_case_4
        solve( PreStart( ~sid, $S, $C, 'server' ) @ #vr.3 )
          case S_0
          solve( Start( ~cid, $C, $S, 'client' ) @ #j.1 )
            case C_1_bi
            solve( TLS_Recv( ~cid, $S, $C,
                             <<'11', pk(~ltk)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~n,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n.1)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_serverauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        pk(~ltk)>)
                                    >,
                                    ~ltk)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_serverauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'11', pk(~ltk)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~n,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n.1)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_serverauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             pk(~ltk)>)
                                         >,
                                         ~ltk)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_target_case_1
              solve( !KU( ~sid ) @ #vk.1 )
                case Adv_Recv_TLS_case_1
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~sid, $certificate_extensions>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_6
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~sid, $certificate_extensions>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_7
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~sid, $certificate_extensions>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_8
                solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.21 )
                  case S_0
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~sid, $certificate_extensions>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case Send_TLS_Channel_target_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case S_Recv
  solve( !Pk( $A, pk(ltkD) ) ▶₄ #k )
    case Register_pk
    solve( PreStart( ~sid, $S, $C, 'server' ) @ #j.1 )
      case S_0
      solve( PendingReqI( ~request_id, ~sid, 'server',
                          <'13', certificate_request_context, $certificate_extensions>
             ) ▶₂ #k )
        case S_Request_case_1
        solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
               ) ▶₃ #k )
          case Create_TLS_channel
          solve( Start( ~sid, $S, $C, 'server' ) @ #j.1 )
            case S_1_uni
            solve( TLS_Recv( ~sid, $C, $S,
                             <<'11', ~certificate_request_context, pk(~ltk.1)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~n,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n.1)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_clientauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        <'13', ~certificate_request_context, $certificate_extensions
                                        >, 
                                        pk(~ltk.1)>)
                                    >,
                                    ~ltk.1)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~n,
                                                         <'32', 'TLS13exportermastersecret', h(~n.1)
                                                         >,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_clientauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'13', ~certificate_request_context, $certificate_extensions>, 
                                    <'11', ~certificate_request_context, pk(~ltk.1)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~n,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n.1)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_clientauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             <'13', ~certificate_request_context, 
                                              $certificate_extensions>, 
                                             pk(~ltk.1)>)
                                         >,
                                         ~ltk.1)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_owner
              solve( !KU( ~certificate_request_context ) @ #vk.6 )
                case Adv_Recv_TLS_case_1
                solve( !KU( sign(<'ExportedAuthenticator', 
                                  h(<
                                     Expand(Expand(Expand(~n,
                                                          <'32', 'TLS13exportermastersecret', 
                                                           h(~n.1)>,
                                                          '32'),
                                                   <'32', 
                                                    'EXPORTER_clientauthenticatorhandshakecontext', 
                                                    'empty'>,
                                                   '32'),
                                            <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                     <'13', ~certificate_request_context, $certificate_extensions>, 
                                     pk(~ltk.1)>)
                                 >,
                                 ~ltk.1)
                       ) @ #vk.11 )
                  case csign
                  solve( !KU( h(<
                                 Expand(Expand(Expand(~n,
                                                      <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                      '32'),
                                               <'32', 
                                                'EXPORTER_clientauthenticatorhandshakecontext', 
                                                'empty'>,
                                               '32'),
                                        <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                 <'13', ~certificate_request_context, $certificate_extensions>, 
                                 pk(~ltk.1)>)
                         ) @ #vk.18 )
                    case ch
                    solve( !KU( Expand(Expand(Expand(~n,
                                                     <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                     '32'),
                                              <'32', 
                                               'EXPORTER_clientauthenticatorhandshakecontext', 
                                               'empty'>,
                                              '32'),
                                       <'32', 'exporter', h(<'empty', '32'>)>, '32')
                           ) @ #vk.23 )
                      case cExpand
                      solve( !KU( Expand(Expand(~n,
                                                <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                         <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                          'empty'>,
                                         '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( Expand(~n,
                                           <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                               ) @ #vk.33 )
                          case cExpand
                          solve( !KU( ~n ) @ #vk.38 )
                            case Adv_Recv_TLS_case_1
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_2
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_3
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_4
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_5
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.24 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_6
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.24 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_7
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.24 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_8
                            solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.27 )
                              case S_0
                              solve( TLS_Recv( ~sid.1, $I, $S.1,
                                               <'13', ~n, $certificate_extensions.1>
                                     ) ▶₁ #vr.24 )
                                case Send_TLS_Channel_owner
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_6
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_7
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_8
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.18 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              next
                case Adv_Recv_TLS_case_9
                solve( PreStart( ~cid, $I, $S.1, 'client' ) @ #vr.23 )
                  case C_0
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S_Request_case_2
        solve( PreStart( ~cid, $C, $S, 'client' ) @ #vr.4 )
          case C_0
          solve( Start( ~sid, $S, $C, 'server' ) @ #j.1 )
            case S_1_uni
            solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
                   ) ▶₃ #k )
              case Create_TLS_channel
              solve( TLS_Recv( ~sid, $C, $S,
                               <<'11', ~certificate_request_context, pk(~ltk.1)>, 
                                <'15', 
                                 sign(<'ExportedAuthenticator', 
                                       h(<
                                          Expand(Expand(Expand(~n,
                                                               <'32', 'TLS13exportermastersecret', 
                                                                h(~n.1)>,
                                                               '32'),
                                                        <'32', 
                                                         'EXPORTER_clientauthenticatorhandshakecontext', 
                                                         'empty'>,
                                                        '32'),
                                                 <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                          <'13', ~certificate_request_context, 
                                           $certificate_extensions>, 
                                          pk(~ltk.1)>)
                                      >,
                                      ~ltk.1)
                                >, 
                                '20', 
                                hmac(<
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_clientauthenticatorfinishedkey', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_clientauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      <'13', ~certificate_request_context, $certificate_extensions
                                      >, 
                                      <'11', ~certificate_request_context, pk(~ltk.1)>, '15', 
                                      sign(<'ExportedAuthenticator', 
                                            h(<
                                               Expand(Expand(Expand(~n,
                                                                    <'32', 
                                                                     'TLS13exportermastersecret', 
                                                                     h(~n.1)>,
                                                                    '32'),
                                                             <'32', 
                                                              'EXPORTER_clientauthenticatorhandshakecontext', 
                                                              'empty'>,
                                                             '32'),
                                                      <'32', 'exporter', h(<'empty', '32'>)>,
                                                      '32'), 
                                               <'13', ~certificate_request_context, 
                                                $certificate_extensions>, 
                                               pk(~ltk.1)>)
                                           >,
                                           ~ltk.1)
                                     >)
                               >
                     ) ▶₁ #k )
                case Send_TLS_Channel_owner_case_1
                solve( !KU( ~certificate_request_context ) @ #vk.6 )
                  case Adv_Recv_TLS_case_1
                  solve( !KU( ~cid ) @ #vk.2 )
                    case Adv_Recv_TLS_case_1
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_2
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_3
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_4
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.24 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.24 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.24 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.27 )
                      case S_0
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~cid, $certificate_extensions.1>
                             ) ▶₁ #vr.24 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Adv_Recv_TLS_case_2
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_3
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_4
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_5
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_6
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_7
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_8
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.18 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_9
                  solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.21 )
                    case S_0
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.18 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case Send_TLS_Channel_owner_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S_Request_case_3
        solve( Start( ~sid, $S, $C, 'server' ) @ #j.1 )
          case S_1_bi
          solve( TLS_Recv( ~sid, $C, $S,
                           <<'11', ~certificate_request_context, pk(~ltk.1)>, 
                            <'15', 
                             sign(<'ExportedAuthenticator', 
                                   h(<hccc, 
                                      <'13', ~certificate_request_context, $certificate_extensions
                                      >, 
                                      pk(~ltk.1)>)
                                  >,
                                  ~ltk.1)
                            >, 
                            '20', 
                            hmac(<fmc, hccc, 
                                  <'13', ~certificate_request_context, $certificate_extensions>, 
                                  <'11', ~certificate_request_context, pk(~ltk.1)>, '15', 
                                  sign(<'ExportedAuthenticator', 
                                        h(<hccc, 
                                           <'13', ~certificate_request_context, 
                                            $certificate_extensions>, 
                                           pk(~ltk.1)>)
                                       >,
                                       ~ltk.1)
                                 >)
                           >
                 ) ▶₁ #k )
            case Send_TLS_Channel_owner
            solve( !KU( ~certificate_request_context ) @ #vk.6 )
              case Adv_Recv_TLS_case_1
              solve( !KU( sign(<'ExportedAuthenticator', 
                                h(<hccc, 
                                   <'13', ~certificate_request_context, $certificate_extensions>, 
                                   pk(~ltk.1)>)
                               >,
                               ~ltk.1)
                     ) @ #vk.11 )
                case Adv_Recv_TLS_case_1
                by solve( PreStart( ~sid.1, $TP, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_2
                by solve( PreStart( ~sid.1, $TP, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_3
                by solve( PreStart( ~sid.1, $TP, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_4
                by solve( PreStart( ~sid.1, $TP, $I, 'server' ) @ #j.3 )
              next
                case Adv_Recv_TLS_case_5
                solve( PreStart( ~sid.1, $TP, $I, 'server' ) @ #vr.27 )
                  case S_0
                  solve( TLS_Recv( ~sid.1, $I, $TP,
                                   <'13', ~certificate_request_context, $certificate_extensions>
                         ) ▶₁ #vr.25 )
                    case Send_TLS_Channel_owner
                    by solve( !Exporters( ms, 'server', ~sid,
                                          Expand(Expand(Expand(~n,
                                                               <'32', 'TLS13exportermastersecret', 
                                                                h(~n.1)>,
                                                               '32'),
                                                        <'32', 
                                                         'EXPORTER_serverauthenticatorhandshakecontext', 
                                                         'empty'>,
                                                        '32'),
                                                 <'32', 'exporter', h(<'empty', '32'>)>, '32'),
                                          hccs, fmc, fms
                              ) ▶₃ #k )
                  qed
                qed
              next
                case Adv_Recv_TLS_case_6
                by solve( !Exporters( ms, 'server', ~sid,
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'),
                                      hccs, fmc, fms
                          ) ▶₃ #k )
              next
                case Adv_Recv_TLS_case_7
                by solve( !Exporters( ms, 'server', ~sid,
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'),
                                      hccs, fmc, fms
                          ) ▶₃ #k )
              next
                case Adv_Recv_TLS_case_8
                by solve( !Exporters( ms, 'server', ~sid,
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_serverauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'),
                                      hccs, fmc, fms
                          ) ▶₃ #k )
              next
                case csign
                solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
                       ) ▶₃ #k )
                  case Create_TLS_channel
                  solve( !KU( h(<
                                 Expand(Expand(Expand(~n,
                                                      <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                      '32'),
                                               <'32', 
                                                'EXPORTER_clientauthenticatorhandshakecontext', 
                                                'empty'>,
                                               '32'),
                                        <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                 <'13', ~certificate_request_context, $certificate_extensions>, 
                                 pk(~ltk.1)>)
                         ) @ #vk.18 )
                    case ch
                    solve( !KU( Expand(Expand(Expand(~n,
                                                     <'32', 'TLS13exportermastersecret', h(~n.1)>,
                                                     '32'),
                                              <'32', 
                                               'EXPORTER_clientauthenticatorhandshakecontext', 
                                               'empty'>,
                                              '32'),
                                       <'32', 'exporter', h(<'empty', '32'>)>, '32')
                           ) @ #vk.23 )
                      case cExpand
                      solve( !KU( Expand(Expand(~n,
                                                <'32', 'TLS13exportermastersecret', h(~n.1)>, '32'),
                                         <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 
                                          'empty'>,
                                         '32')
                             ) @ #vk.26 )
                        case cExpand
                        solve( !KU( Expand(~n,
                                           <'32', 'TLS13exportermastersecret', h(~n.1)>, '32')
                               ) @ #vk.33 )
                          case cExpand
                          solve( !KU( ~n ) @ #vk.38 )
                            case Adv_Recv_TLS_case_1
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_2
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_3
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_4
                            by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                          next
                            case Adv_Recv_TLS_case_5
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.25 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_6
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.25 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_7
                            solve( TLS_Recv( ~sid.1, $I, $S.1,
                                             <'13', ~n, $certificate_extensions.1>
                                   ) ▶₁ #vr.25 )
                              case Send_TLS_Channel_owner
                              by contradiction /* cyclic */
                            qed
                          next
                            case Adv_Recv_TLS_case_8
                            solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.28 )
                              case S_0
                              solve( TLS_Recv( ~sid.1, $I, $S.1,
                                               <'13', ~n, $certificate_extensions.1>
                                     ) ▶₁ #vr.25 )
                                case Send_TLS_Channel_owner
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Adv_Recv_TLS_case_2
              by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
            next
              case Adv_Recv_TLS_case_3
              by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
            next
              case Adv_Recv_TLS_case_4
              by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
            next
              case Adv_Recv_TLS_case_5
              by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
            next
              case Adv_Recv_TLS_case_6
              solve( TLS_Recv( ~sid.1, $I, $S.1,
                               <'13', ~certificate_request_context, $certificate_extensions.1>
                     ) ▶₁ #vr.19 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_7
              solve( TLS_Recv( ~sid.1, $I, $S.1,
                               <'13', ~certificate_request_context, $certificate_extensions.1>
                     ) ▶₁ #vr.19 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_8
              solve( TLS_Recv( ~sid.1, $I, $S.1,
                               <'13', ~certificate_request_context, $certificate_extensions.1>
                     ) ▶₁ #vr.19 )
                case Send_TLS_Channel_owner
                by contradiction /* cyclic */
              qed
            next
              case Adv_Recv_TLS_case_9
              solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.22 )
                case S_0
                solve( TLS_Recv( ~sid.1, $I, $S.1,
                                 <'13', ~certificate_request_context, $certificate_extensions.1>
                       ) ▶₁ #vr.19 )
                  case Send_TLS_Channel_owner
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case S_Request_case_4
        solve( !Exporters( ms, 'server', ~sid, hccc, hccs, fmc, fms
               ) ▶₃ #k )
          case Create_TLS_channel
          solve( PreStart( ~cid, $C, $S, 'client' ) @ #vr.5 )
            case C_0
            solve( Start( ~sid, $S, $C, 'server' ) @ #j.1 )
              case S_1_bi
              solve( TLS_Recv( ~sid, $C, $S,
                               <<'11', ~certificate_request_context, pk(~ltk.1)>, 
                                <'15', 
                                 sign(<'ExportedAuthenticator', 
                                       h(<
                                          Expand(Expand(Expand(~n,
                                                               <'32', 'TLS13exportermastersecret', 
                                                                h(~n.1)>,
                                                               '32'),
                                                        <'32', 
                                                         'EXPORTER_clientauthenticatorhandshakecontext', 
                                                         'empty'>,
                                                        '32'),
                                                 <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                          <'13', ~certificate_request_context, 
                                           $certificate_extensions>, 
                                          pk(~ltk.1)>)
                                      >,
                                      ~ltk.1)
                                >, 
                                '20', 
                                hmac(<
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_clientauthenticatorfinishedkey', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      Expand(Expand(Expand(~n,
                                                           <'32', 'TLS13exportermastersecret', 
                                                            h(~n.1)>,
                                                           '32'),
                                                    <'32', 
                                                     'EXPORTER_clientauthenticatorhandshakecontext', 
                                                     'empty'>,
                                                    '32'),
                                             <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                      <'13', ~certificate_request_context, $certificate_extensions
                                      >, 
                                      <'11', ~certificate_request_context, pk(~ltk.1)>, '15', 
                                      sign(<'ExportedAuthenticator', 
                                            h(<
                                               Expand(Expand(Expand(~n,
                                                                    <'32', 
                                                                     'TLS13exportermastersecret', 
                                                                     h(~n.1)>,
                                                                    '32'),
                                                             <'32', 
                                                              'EXPORTER_clientauthenticatorhandshakecontext', 
                                                              'empty'>,
                                                             '32'),
                                                      <'32', 'exporter', h(<'empty', '32'>)>,
                                                      '32'), 
                                               <'13', ~certificate_request_context, 
                                                $certificate_extensions>, 
                                               pk(~ltk.1)>)
                                           >,
                                           ~ltk.1)
                                     >)
                               >
                     ) ▶₁ #k )
                case Send_TLS_Channel_owner_case_1
                solve( !KU( ~certificate_request_context ) @ #vk.6 )
                  case Adv_Recv_TLS_case_1
                  solve( !KU( ~cid ) @ #vk.2 )
                    case Adv_Recv_TLS_case_1
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_2
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_3
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_4
                    by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                  next
                    case Adv_Recv_TLS_case_5
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.25 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_6
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.25 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_7
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~cid, $certificate_extensions.1>
                           ) ▶₁ #vr.25 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  next
                    case Adv_Recv_TLS_case_8
                    solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.28 )
                      case S_0
                      solve( TLS_Recv( ~sid.1, $I, $S.1,
                                       <'13', ~cid, $certificate_extensions.1>
                             ) ▶₁ #vr.25 )
                        case Send_TLS_Channel_owner
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Adv_Recv_TLS_case_2
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_3
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_4
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_5
                  by solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #j.3 )
                next
                  case Adv_Recv_TLS_case_6
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.19 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_7
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.19 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_8
                  solve( TLS_Recv( ~sid.1, $I, $S.1,
                                   <'13', ~certificate_request_context, $certificate_extensions.1>
                         ) ▶₁ #vr.19 )
                    case Send_TLS_Channel_owner
                    by contradiction /* cyclic */
                  qed
                next
                  case Adv_Recv_TLS_case_9
                  solve( PreStart( ~sid.1, $S.1, $I, 'server' ) @ #vr.22 )
                    case S_0
                    solve( TLS_Recv( ~sid.1, $I, $S.1,
                                     <'13', ~certificate_request_context, $certificate_extensions.1>
                           ) ▶₁ #vr.19 )
                      case Send_TLS_Channel_owner
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case Send_TLS_Channel_owner_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cert_linking:
  all-traces
  "∀ actor ms role ltkD del ltkD2 del2 #j #k.
    ((Recv( actor, ms, role, <del, pk(ltkD)> ) @ #j) ∧
     (Recv( actor, ms, role, <del2, pk(ltkD2)> ) @ #k)) ⇒
    (((∃ peer role2 #h #i.
        ((((Owns( peer, ms, role2, <del, ltkD> ) @ #h) ∧ (#h < #j)) ∧
          (Owns( peer, ms, role2, <del2, ltkD2> ) @ #i)) ∧
         (#i < #k)) ∧
        (¬(role = role2))) ∨
      (∃ #l. (RevLtk( del ) @ #l) ∧ (#l < #k))) ∨
     (∃ #l. (RevLtk( del2 ) @ #l) ∧ (#l < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ms role ltkD del ltkD2 del2 #j #k.
  (Recv( actor, ms, role, <del, pk(ltkD)> ) @ #j) ∧
  (Recv( actor, ms, role, <del2, pk(ltkD2)> ) @ #k)
 ∧
  (∀ peer role2 #h #i.
    (Owns( peer, ms, role2, <del, ltkD> ) @ #h) ∧
    (Owns( peer, ms, role2, <del2, ltkD2> ) @ #i)
   ⇒
    ((¬(#h < #j)) ∨ (¬(#i < #k)) ∨ (role = role2))) ∧
  (∀ #l. (RevLtk( del ) @ #l) ⇒ ¬(#l < #k)) ∧
  (∀ #l. (RevLtk( del2 ) @ #l) ⇒ ¬(#l < #k))"
*/
by sorry

/* All well-formedness checks were successful. */

end