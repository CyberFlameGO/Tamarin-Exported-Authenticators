theory ExportedAuthenticators_lemmas begin

// Function signature and definition of the equational theory E

functions: Expand/3, Exporter/3, Extract/2, adec/2, aenc/2, fst/1,
           h/1, hmac/1, mac/1, mask/2, pair/2, pk/1, sign/2, snd/1, true/0,
           unmask/2, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    unmask(mask(x, y), x) = y,
    unmask(mask(x, y), y) = x,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

section{* TLS Exported Authenticators*}

restriction Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction pair_or_swapped:
  "∀ x y a b #i.
    (Check_pair_or_swapped( x, y, a, b ) @ #i) ⇒
    (((x = a) ∧ (y = b)) ∨ ((x = b) ∧ (y = a)))"
  // safety formula

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ RevLtk( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_Adv_TLS_channel:
   [ Fr( ms ), Fr( TLS_transcript ), Fr( ~owner_cid ), Fr( cid ) ]
  --[ Adv_TLS( $I, ~owner_cid ) ]->
   [
   !TLS_Channel( ms, TLS_transcript, $I, ~owner_cid, $S, cid ),
   !Exporters( ms, 'server', cid,
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32')
   ),
   ServerStart( cid ),
   Out( <~owner_cid, 
         Expand(Expand(Expand(ms,
                              <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                       <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                       '32'),
                <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
         Expand(Expand(Expand(ms,
                              <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                       <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                       '32'),
                <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
         Expand(Expand(Expand(ms,
                              <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                       <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
         Expand(Expand(Expand(ms,
                              <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                       <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                <'32', 'exporter', h(<'empty', '32'>)>, '32')
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_Send_TLS:
   [
   In( <~owner_cid, m> ),
   !TLS_Channel( ms, TLS_transcript, $I, ~owner_cid, $S, cid )
   ]
  -->
   [ TLS_Send( ~owner_cid, $I, $S, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv_Recv_TLS:
   [ TLS_Recv( ~owner_cid, from_host, to_host, msg ), In( ~owner_cid )
   ]
  -->
   [ Out( <from_host, to_host, msg> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), DelegateLtk( $TP, ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pubkey ) ] --> [ Out( pubkey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Create_TLS_channel:
   [
   Fr( ms ), Fr( TLS_transcript ), Fr( cid ),
   Create_TLS_Channel( owner_host, owner_cid, target_host )
   ]
  --[ SessionKey( ms, TLS_transcript ) ]->
   [
   !TLS_Channel( ms, TLS_transcript, owner_host, owner_cid,
                 target_host, cid
   ),
   !Exporters( ms, 'server', cid,
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32')
   ),
   ServerStart( cid ),
   !Exporters( ms, 'client', owner_cid,
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorhandshakecontext', 'empty'>,
                             '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_clientauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32'),
               Expand(Expand(Expand(ms,
                                    <'32', 'TLS13exportermastersecret', h(TLS_transcript)>, '32'),
                             <'32', 'EXPORTER_serverauthenticatorfinishedkey', 'empty'>, '32'),
                      <'32', 'exporter', h(<'empty', '32'>)>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_TLS_Channel_owner:
   [
   TLS_Send( cid, from_host, to_host, msg ),
   !TLS_Channel( ms, TLS_transcript, owner_host, owner_cid,
                 target_host, target_cid
   )
   ]
  --[
  Check_pair_or_swapped( from_host, to_host, owner_host, target_host
  ),
  Eq( cid, owner_cid )
  ]->
   [ TLS_Recv( target_cid, from_host, to_host, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_TLS_Channel_target:
   [
   TLS_Send( cid, from_host, to_host, msg ),
   !TLS_Channel( ms, TLS_transcript, owner_host, owner_cid,
                 target_host, target_cid
   )
   ]
  --[
  Check_pair_or_swapped( from_host, to_host, owner_host, target_host
  ),
  Eq( cid, target_cid )
  ]->
   [ TLS_Recv( owner_cid, from_host, to_host, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_0:
   [ Fr( ~tid ) ]
  --[ Start( ~tid, $C, $S, 'client' ), C0( ~tid ) ]->
   [
   State( ~tid, 'C0', $C, $S, 'client' ),
   Create_TLS_Channel( $C, ~tid, $S )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_Send:
   [
   State( ~tid, 'C0', $C, $S, 'client' ),
   Fr( ~certificate_request_context ),
   !Exporters( ~ms, 'client', ~tid, hccc, hccs, fmc, fms ),
   !Ltk( $A, ~ltkA ), DelegateLtk( $C, ~ltkA )
   ]
  --[
  C_Send( ~tid ), Owns( $C, <$A, ~ltkA> ),
  Instance( ~tid, $C, $S, 'client' )
  ]->
   [
   State( ~tid, 'C0', $C, $S, 'client' ),
   TLS_Send( ~tid, $C, $S,
             <<'11', ~certificate_request_context, pk(~ltkA)>, 
              <'15', sign(<'ExportedAuthenticator', h(<hccc, pk(~ltkA)>)>, ~ltkA)
              >, 
              '20', 
              hmac(<fmc, hccc, <'11', ~certificate_request_context, pk(~ltkA)>, 
                    '15', sign(<'ExportedAuthenticator', h(<hccc, pk(~ltkA)>)>, ~ltkA)
                   >)
             >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) C_Recv:
   [
   State( ~tid, 'C0', $C, $S, 'client' ),
   TLS_Recv( ~tid, $C, $S,
             <<'11', certificate_request_context, pk(~ltkA)>, 
              <'15', signature>, '20', verify_data>
   ),
   !Exporters( ~ms, 'client', ~tid, hccc, hccs, fmc, fms ),
   !Pk( $A, pk(~ltkA) )
   ]
  --[
  C_Recv( ~tid ),
  Eq( verify(signature,
             <'ExportedAuthenticator', h(<hccs, pk(~ltkA)>)>, pk(~ltkA)),
      true
  ),
  Eq( verify_data,
      hmac(<fms, hccs, <'11', certificate_request_context, pk(~ltkA)>, 
            '15', signature>)
  ),
  Recv( $C, $S, <$A, pk(~ltkA)> ), Instance( ~tid, $C, $S, 'client' )
  ]->
   [
   State( ~tid, 'C0', $C, $S, 'client' ),
   !AcceptOwnership( ~tid, $C, $S, pk(~ltkA) )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) C_Recv:
     [
     State( ~tid, 'C0', $C, $S, 'client' ),
     TLS_Recv( ~tid, $C, $S,
               <<'11', certificate_request_context, pk(~ltkA)>, 
                <'15', signature>, '20', verify_data>
     ),
     !Exporters( ~ms, 'client', ~tid, hccc, hccs, fmc, fms ),
     !Pk( $A, pk(~ltkA) )
     ]
    --[
    C_Recv( ~tid ), Eq( z, true ),
    Eq( verify_data,
        hmac(<fms, hccs, <'11', certificate_request_context, pk(~ltkA)>, 
              '15', signature>)
    ),
    Recv( $C, $S, <$A, pk(~ltkA)> ), Instance( ~tid, $C, $S, 'client' )
    ]->
     [
     State( ~tid, 'C0', $C, $S, 'client' ),
     !AcceptOwnership( ~tid, $C, $S, pk(~ltkA) )
     ]
    variants (modulo AC)
    1. ~ltkA = ~ltkA.28
       hccs  = hccs.35
       signature
             = sign(<'ExportedAuthenticator', h(<hccs.35, pk(~ltkA.28)>)>,
                    ~ltkA.28)
       z     = true
    
    2. ~ltkA = ~ltkA.29
       hccs  = hccs.36
       signature
             = signature.37
       z     = verify(signature.37,
                      <'ExportedAuthenticator', h(<hccs.36, pk(~ltkA.29)>)>,
                      pk(~ltkA.29))
    // loop breaker: [0]
  */

rule (modulo E) S_0:
   [
   !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms ),
   ServerStart( ~tid )
   ]
  --[ Start( ~tid, $S, $C, 'server' ), S0( ~tid ) ]->
   [ State( ~tid, 'S0', $S, $C, 'server' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_Recv:
   [
   State( ~tid, 'S0', $S, $C, 'server' ),
   TLS_Recv( ~tid, $C, $S,
             <<'11', certificate_request_context, pk(~ltkA)>, 
              <'15', signature>, '20', verify_data>
   ),
   !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms ),
   !Pk( $A, pk(~ltkA) )
   ]
  --[
  S_Recv( ~tid ),
  Eq( verify(signature,
             <'ExportedAuthenticator', h(<hccc, pk(~ltkA)>)>, pk(~ltkA)),
      true
  ),
  Eq( verify_data,
      hmac(<fmc, hccc, <'11', certificate_request_context, pk(~ltkA)>, 
            '15', signature>)
  ),
  Recv( $S, $C, <$A, pk(~ltkA)> ), Instance( ~tid, $S, $C, 'server' )
  ]->
   [
   State( ~tid, 'S0', $S, $C, 'server' ),
   !AcceptOwnership( ~tid, $C, $S, pk(~ltkA) )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) S_Recv:
     [
     State( ~tid, 'S0', $S, $C, 'server' ),
     TLS_Recv( ~tid, $C, $S,
               <<'11', certificate_request_context, pk(~ltkA)>, 
                <'15', signature>, '20', verify_data>
     ),
     !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms ),
     !Pk( $A, pk(~ltkA) )
     ]
    --[
    S_Recv( ~tid ), Eq( z, true ),
    Eq( verify_data,
        hmac(<fmc, hccc, <'11', certificate_request_context, pk(~ltkA)>, 
              '15', signature>)
    ),
    Recv( $S, $C, <$A, pk(~ltkA)> ), Instance( ~tid, $S, $C, 'server' )
    ]->
     [
     State( ~tid, 'S0', $S, $C, 'server' ),
     !AcceptOwnership( ~tid, $C, $S, pk(~ltkA) )
     ]
    variants (modulo AC)
    1. ~ltkA = ~ltkA.27
       hccc  = hccc.33
       signature
             = sign(<'ExportedAuthenticator', h(<hccc.33, pk(~ltkA.27)>)>,
                    ~ltkA.27)
       z     = true
    
    2. ~ltkA = ~ltkA.29
       hccc  = hccc.35
       signature
             = signature.37
       z     = verify(signature.37,
                      <'ExportedAuthenticator', h(<hccc.35, pk(~ltkA.29)>)>,
                      pk(~ltkA.29))
    // loop breaker: [0]
  */

rule (modulo E) S_Send:
   [
   State( ~tid, 'S0', $S, $C, 'server' ),
   Fr( ~certificate_request_context ),
   !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms ),
   !Ltk( $A, ~ltkA ), DelegateLtk( $S, ~ltkA )
   ]
  --[
  S_Send( ~tid ), Owns( $S, <$A, ~ltkA> ),
  Instance( ~tid, $S, $C, 'server' )
  ]->
   [
   State( ~tid, 'S0', $S, $C, 'server' ),
   TLS_Send( ~tid, $C, $S,
             <<'11', ~certificate_request_context, pk(~ltkA)>, 
              <'15', sign(<'ExportedAuthenticator', h(<hccs, pk(~ltkA)>)>, ~ltkA)
              >, 
              '20', 
              hmac(<fms, hccs, <'11', ~certificate_request_context, pk(~ltkA)>, 
                    '15', sign(<'ExportedAuthenticator', h(<hccs, pk(~ltkA)>)>, ~ltkA)
                   >)
             >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma uniq_Start:
  all-traces
  "∀ tid actor1 actor2 peer1 peer2 role1 role2 #i #j.
    ((Start( tid, actor1, peer1, role1 ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    ((((#i = #j) ∧ (actor1 = actor2)) ∧ (peer1 = peer2)) ∧
     (role1 = role2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor1 actor2 peer1 peer2 role1 role2 #i #j.
  (Start( tid, actor1, peer1, role1 ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ((¬(#i = #j)) ∨
   (¬(actor1 = actor2)) ∨
   (¬(peer1 = peer2)) ∨
   (¬(role1 = role2)))"
*/
by sorry

lemma tid_invariant [use_induction, reuse]:
  all-traces
  "∀ tid actor peer role #i.
    (Instance( tid, actor, peer, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, peer, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role #i.
  (Instance( tid, actor, peer, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, peer, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma one_start_per_tid [reuse]:
  all-traces
  "∀ tid actor actor2 peer peer2 role role2 #i #j.
    ((Start( tid, actor, peer, role ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 peer peer2 role role2 #i #j.
  (Start( tid, actor, peer, role ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma exists_Start:
  exists-trace
  "∃ tid actor peer role #j. Start( tid, actor, peer, role ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ tid actor peer role #j. (Start( tid, actor, peer, role ) @ #j)"
*/
by sorry

lemma exists_C_Recv:
  exists-trace "∃ tid #j. C_Recv( tid ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ tid #j. (C_Recv( tid ) @ #j)"
*/
by sorry

lemma exists_S_Recv:
  exists-trace "∃ tid #j. S_Recv( tid ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ tid #j. (S_Recv( tid ) @ #j)"
*/
by sorry

lemma constant_peer:
  all-traces
  "∀ tid actor actor2 peer peer2 role role2 #i #j.
    ((Instance( tid, actor, peer, role ) @ #i) ∧
     (Start( tid, actor2, peer2, role2 ) @ #j)) ⇒
    (((actor = actor2) ∧ (peer = peer2)) ∧ (role = role2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 peer peer2 role role2 #i #j.
  (Instance( tid, actor, peer, role ) @ #i) ∧
  (Start( tid, actor2, peer2, role2 ) @ #j)
 ∧
  ((¬(actor = actor2)) ∨ (¬(peer = peer2)) ∨ (¬(role = role2)))"
*/
by sorry

lemma can_loop_S_Recv:
  exists-trace
  "∃ tid #j #k.
    ((S_Recv( tid ) @ #j) ∧ (S_Recv( tid ) @ #k)) ∧ (#j < #k)"
/*
guarded formula characterizing all satisfying traces:
"∃ tid #j #k.
  (S_Recv( tid ) @ #j) ∧ (S_Recv( tid ) @ #k) ∧ #j < #k"
*/
by sorry

lemma can_loop_C_Recv:
  exists-trace
  "∃ tid #j #k.
    ((C_Recv( tid ) @ #j) ∧ (C_Recv( tid ) @ #k)) ∧ (#j < #k)"
/*
guarded formula characterizing all satisfying traces:
"∃ tid #j #k.
  (C_Recv( tid ) @ #j) ∧ (C_Recv( tid ) @ #k) ∧ #j < #k"
*/
by sorry /* removed */

lemma secret_session_keys:
  all-traces
  "∀ ms transcript #i.
    (SessionKey( ms, transcript ) @ #i) ⇒
    ((¬(∃ #j. K( ms ) @ #j)) ∧ (¬(∃ #k. K( transcript ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ ms transcript #i.
  (SessionKey( ms, transcript ) @ #i)
 ∧
  ((∃ #j. (K( ms ) @ #j)) ∨ (∃ #k. (K( transcript ) @ #k)))"
*/
simplify
solve( (∃ #j. (K( ~n ) @ #j))  ∥ (∃ #k. (K( ~n.1 ) @ #k)) )
  case case_1
  by solve( !KU( ~n ) @ #vk )
next
  case case_2
  by solve( !KU( ~n.1 ) @ #vk )
qed

lemma cert_ownership:
  all-traces
  "∀ actor peer ltkD del #k.
    (Recv( actor, peer, <del, pk(ltkD)> ) @ #k) ⇒
    ((∃ #i. (Owns( peer, <del, ltkD> ) @ #i) ∧ (#i < #k)) ∨
     (∃ #j. (RevLtk( del ) @ #j) ∧ (#j < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer ltkD del #k.
  (Recv( actor, peer, <del, pk(ltkD)> ) @ #k)
 ∧
  (∀ #i. (Owns( peer, <del, ltkD> ) @ #i) ⇒ ¬(#i < #k)) ∧
  (∀ #j. (RevLtk( del ) @ #j) ⇒ ¬(#j < #k))"
*/
simplify
solve( Recv( actor, peer, <del, pk(ltkD)> ) @ #k )
  case C_Recv
  solve( Start( ~tid, $C, $S, 'client' ) @ #j )
    case C_0
    solve( !Pk( $A, pk(~ltkA) ) ▶₃ #k )
      case Register_pk
      solve( !Exporters( ~ms, 'client', ~tid, hccc, hccs, fmc, fms
             ) ▶₂ #k )
        case Create_TLS_channel
        solve( TLS_Recv( ~tid, $C, $S,
                         <<'11', certificate_request_context, pk(~ltkA)>, 
                          <'15', 
                           sign(<'ExportedAuthenticator', 
                                 h(<
                                    Expand(Expand(Expand(~ms,
                                                         <'32', 'TLS13exportermastersecret', h(~n)>,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_serverauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    pk(~ltkA)>)
                                >,
                                ~ltkA)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(Expand(~ms,
                                                     <'32', 'TLS13exportermastersecret', h(~n)>,
                                                     '32'),
                                              <'32', 'EXPORTER_serverauthenticatorfinishedkey', 
                                               'empty'>,
                                              '32'),
                                       <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                Expand(Expand(Expand(~ms,
                                                     <'32', 'TLS13exportermastersecret', h(~n)>,
                                                     '32'),
                                              <'32', 
                                               'EXPORTER_serverauthenticatorhandshakecontext', 
                                               'empty'>,
                                              '32'),
                                       <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                <'11', certificate_request_context, pk(~ltkA)>, '15', 
                                sign(<'ExportedAuthenticator', 
                                      h(<
                                         Expand(Expand(Expand(~ms,
                                                              <'32', 'TLS13exportermastersecret', 
                                                               h(~n)>,
                                                              '32'),
                                                       <'32', 
                                                        'EXPORTER_serverauthenticatorhandshakecontext', 
                                                        'empty'>,
                                                       '32'),
                                                <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                         pk(~ltkA)>)
                                     >,
                                     ~ltkA)
                               >)
                         >
               ) ▶₁ #k )
          case Send_TLS_Channel_target
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case S_Recv
  solve( Start( ~tid, $S, $C, 'server' ) @ #j )
    case S_0
    solve( ServerStart( ~tid ) ▶₁ #j )
      case Create_Adv_TLS_channel
      solve( !Pk( $A, pk(~ltkA) ) ▶₃ #k )
        case Register_pk
        solve( !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms
               ) ▶₀ #j )
          case Create_Adv_TLS_channel
          solve( !Exporters( ~ms.1, 'server', ~tid, hccc, hccs, fmc, fms
                 ) ▶₂ #k )
            case Create_Adv_TLS_channel
            solve( TLS_Recv( ~tid, $C, $S,
                             <<'11', certificate_request_context, pk(~ltkA)>, 
                              <'15', 
                               sign(<'ExportedAuthenticator', 
                                     h(<
                                        Expand(Expand(Expand(~ms,
                                                             <'32', 'TLS13exportermastersecret', 
                                                              h(~n)>,
                                                             '32'),
                                                      <'32', 
                                                       'EXPORTER_clientauthenticatorhandshakecontext', 
                                                       'empty'>,
                                                      '32'),
                                               <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                        pk(~ltkA)>)
                                    >,
                                    ~ltkA)
                              >, 
                              '20', 
                              hmac(<
                                    Expand(Expand(Expand(~ms,
                                                         <'32', 'TLS13exportermastersecret', h(~n)>,
                                                         '32'),
                                                  <'32', 'EXPORTER_clientauthenticatorfinishedkey', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    Expand(Expand(Expand(~ms,
                                                         <'32', 'TLS13exportermastersecret', h(~n)>,
                                                         '32'),
                                                  <'32', 
                                                   'EXPORTER_clientauthenticatorhandshakecontext', 
                                                   'empty'>,
                                                  '32'),
                                           <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                    <'11', certificate_request_context, pk(~ltkA)>, '15', 
                                    sign(<'ExportedAuthenticator', 
                                          h(<
                                             Expand(Expand(Expand(~ms,
                                                                  <'32', 
                                                                   'TLS13exportermastersecret', 
                                                                   h(~n)>,
                                                                  '32'),
                                                           <'32', 
                                                            'EXPORTER_clientauthenticatorhandshakecontext', 
                                                            'empty'>,
                                                           '32'),
                                                    <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                             pk(~ltkA)>)
                                         >,
                                         ~ltkA)
                                   >)
                             >
                   ) ▶₁ #k )
              case Send_TLS_Channel_owner
              solve( !KU( sign(<'ExportedAuthenticator', 
                                h(<
                                   Expand(Expand(Expand(~ms,
                                                        <'32', 'TLS13exportermastersecret', h(~n)>,
                                                        '32'),
                                                 <'32', 
                                                  'EXPORTER_clientauthenticatorhandshakecontext', 
                                                  'empty'>,
                                                 '32'),
                                          <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                   pk(~ltkA)>)
                               >,
                               ~ltkA)
                     ) @ #vk.11 )
                case c_sign
                solve( !KU( ~ltkA ) @ #vk.16 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Create_TLS_channel
      solve( !Pk( $A, pk(~ltkA) ) ▶₃ #k )
        case Register_pk
        solve( TLS_Recv( ~tid, $C, $S,
                         <<'11', certificate_request_context, pk(~ltkA)>, 
                          <'15', 
                           sign(<'ExportedAuthenticator', h(<hccc.1, pk(~ltkA)>)>, ~ltkA)>, 
                          '20', 
                          hmac(<fmc.1, hccc.1, 
                                <'11', certificate_request_context, pk(~ltkA)>, '15', 
                                sign(<'ExportedAuthenticator', h(<hccc.1, pk(~ltkA)>)>, ~ltkA)>)
                         >
               ) ▶₁ #k )
          case Send_TLS_Channel_owner_case_1
          solve( !Exporters( ~ms, 'server', ~tid, hccc, hccs, fmc, fms
                 ) ▶₀ #j )
            case Create_TLS_channel
            solve( !Exporters( ~ms.1, 'server', ~tid, hccc, hccs, fmc, fms
                   ) ▶₂ #k )
              case Create_TLS_channel
              solve( !KU( sign(<'ExportedAuthenticator', 
                                h(<
                                   Expand(Expand(Expand(~ms,
                                                        <'32', 'TLS13exportermastersecret', h(~n)>,
                                                        '32'),
                                                 <'32', 
                                                  'EXPORTER_clientauthenticatorhandshakecontext', 
                                                  'empty'>,
                                                 '32'),
                                          <'32', 'exporter', h(<'empty', '32'>)>, '32'), 
                                   pk(~ltkA)>)
                               >,
                               ~ltkA)
                     ) @ #vk.11 )
                case Adv_Recv_TLS
                solve( (($TP = $C) ∧ ($S.1 = $S))  ∥ (($TP = $S) ∧ ($S.1 = $C)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( Start( ~tid.1, $S, $C, 'client' ) @ #vr.1 )
                    case C_0
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~ltkA ) @ #vk.16 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case Send_TLS_Channel_owner_case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end