define(<!lemma_exists_Start!>,<!dnl
lemma exists_Start:
exists-trace
  "Ex tid actor peer role #j. Start(tid, actor, peer, role)@j"
!>)dnl
dnl
define(<!lemma_pre_tid_invariant!>, <!dnl
lemma pre_tid_invariant[reuse]:
  "All tid actor peer role #i. Start(tid, actor, peer, role)@i==>
    (Ex #j. PreStart(tid, actor, peer, role)@j & (#j < #i))"
!>)dnl
dnl
define(<!lemma_tid_invariant!>, <!dnl
lemma tid_invariant [use_induction, reuse]:
  "All tid actor peer role #i. Instance(tid, actor, peer, role)@i==>
    (Ex #j. Start(tid, actor, peer, role)@j & (#j < #i))"
!>)dnl
dnl
define(<!lemma_one_prestart_per_tid!>, <!dnl
lemma one_prestart_per_tid [reuse]:
  "All tid actor actor2 peer peer2 role role2 #i #j. PreStart(tid, actor, peer, role)@i & PreStart(tid, actor2, peer2, role2)@j ==> #i = #j"
!>)dnl
define(<!lemma_one_start_per_tid!>, <!dnl
lemma one_start_per_tid [reuse]:
  "All tid actor actor2 peer peer2 role role2 #i #j. Start(tid, actor, peer, role)@i & Start(tid, actor2, peer2, role2)@j ==>#i = #j"
!>)dnl
dnl
define(<!lemma_uniq_tid!>, <!dnl
lemma uniq_Start:
  "All tid actor1 actor2 peer1 peer2 role1 role2 #i #j. Start(tid, actor1, peer1, role1)@i & Start(tid, actor2, peer2, role2)@j ==>  #i=#j & actor1=actor2 & peer1=peer2 & role1=role2"
!>)dnl
dnl
define(<!lemma_start_self!>, <!dnl
lemma Start_Self[reuse]:
  "All tid actor role #i. Start(tid, actor, actor, role)@i ==> F"
!>)dnl
dnl
define(<!lemma_self_reference!>, <!dnl
lemma Self_Reference[reuse]:
  "All tid actor role #i. Instance(tid, actor, actor, role)@i ==> F"
!>)dnl
define(<!lemma_C_send_RecvReq!>, <!dnl
lemma C_Send_RecvReq[reuse, use_induction]:
  "All tid #i. C_Send(tid)@i ==> Ex #j. C_RecvReq(tid)@j & #j < #i"
!>)dnl
define(<!lemma_start_first!>, <!dnl
lemma StartFirst[reuse, use_induction]:
  "All tid actor peer role #i #j. Start(tid, actor, peer, role)@i & Instance(tid, actor, peer, role)@j ==> #i < #j"
!>)dnl
define(<!lemma_exists_state!>,<!dnl
lemma exists_$1:
exists-trace
  "Ex tid #j. $1(tid)@j"
!>)dnl   
dnl
define(<!lemma_exists_CReq!>, <!dnl
lemma exists_CReq:
exists-trace
  "Ex tid #j ctxt. C_Req(tid, ctxt)@j"
!>)dnl
define(<!lemma_good_start!>, <!dnl
lemma good_start[SOURCES]:
  "All tid #j. C_RecvReq(tid)@j ==> not(Ex actor peer role #i. StartI(tid, actor, peer, role)@i)"
!>)dnl
dnl
define(<!lemma_constant_peer!>, <!dnl
lemma constant_peer[reuse]:
  "All tid actor actor2 peer peer2 role role2 #i #j. Instance(tid, actor, peer, role)@i & Start(tid, actor2, peer2, role2)@j ==> actor=actor2 & peer = peer2 & role=role2"
!>)dnl
dnl
define(<!lemma_can_loop_state!>,<!dnl
lemma can_loop_$1:
exists-trace
  "Ex tid #j #k. $1(tid)@j & $1(tid)@k &  (#j < #k)"
!>)dnl   
dnl
define(<!lemma_secret_session_keys!>,<!dnl
lemma secret_session_keys:
  "All ms transcript #i. SessionKey(ms, transcript)@i ==> not (Ex #j. K(ms)@j) & not (Ex #k. K(transcript)@k)"
!>)dnl
dnl
define(<!lemma_reachable_session_keys!>,<!dnl
lemma reachable_session_keys:
  exists-trace
  "Ex ms transcript #i. SessionKey(ms, transcript)@i"
!>)dnl
dnl
define(<!lemma_cert_ownership!>,<!dnl
lemma cert_ownership[reuse]:
  "All actor ms ltkD del role #k. Recv(actor, ms, role, <del, pk(ltkD)>)@k ==> (Ex peer role2 #i. Owns(peer, ms, role2, <del, ltkD>)@i & (#i<#k) & not(role=role2)) | (Ex #j. RevLtk(del)@j & (#j<#k))"
!>)dnl
dnl
define(<!lemma_consistent_nonce!>,<!dnl
lemma consistent_nonce[reuse]:
  "All tid actor peer role actor2 peer2 role2 #i #j. Instance(tid, actor, peer, role)@i & Instance(tid, actor2, peer2, role2)@j ==> actor=actor2 & peer=peer2 & role=role2"
!>)dnl
dnl
define(<!lemma_cert_linking!>,<!dnl
lemma cert_linking:
  "All actor ms role ltkD del ltkD2 del2 #j #k. Recv(actor, ms, role, <del, pk(ltkD)>)@j & Recv(actor, ms, role, <del2, pk(ltkD2)>)@k 
  ==> (Ex peer role2 #h #i. Owns(peer, ms, role2, <del, ltkD>)@h & (#h < #j) & Owns(peer, ms, role2, <del2, ltkD2>)@i & (#i < #k) & not(role=role2)) 
    | (Ex #l. RevLtk(del)@l & (#l<#k))
    | (Ex #l. RevLtk(del2)@l & (#l<#k))"
!>)dnl
dnl
