rule C_0:
  let
    C=$C
    S=$S
  in
    [ Fr(~cid)
    ]
  --[ PreStart(~cid, C, S, 'client') 
    , C0(~cid)
    , Neq(C,S)
    ]->
    [ State(~cid, 'C0', C, S, 'client', 'none')
    , Create_TLS_Channel(C, ~cid, S)
    ]

rule C_1_uni:
  let
    C=$C
    S=$S
  in
    [ Create_TLS_Channel2(C, ~cid, S, sid, pk(ltkS))
    , State(~cid, 'C0', C, S, 'client', 'none')
    , !Pk(S, pk(ltkS))
    ]
  --[ C1(~cid)
    , Start(~cid, C, S, 'client')
    ]->
    [ State(~cid, 'C1', C, S, 'client', 'auth')
    , Create_TLS_Channel3(C, ~cid, 'none', S, sid, pk(ltkS))
    ]

rule C_1_bi:
  let
    C=$C
    S=$S
  in
    [ Create_TLS_Channel2(C, ~cid, S, sid, pk(ltkS))
    , State(~cid, 'C0', C, S, 'client', 'none')
    , !Pk(S, pk(ltkS))
    , !Ltk(C, ltkC)
    ]
  --[ C1(~cid)
    , Start(~cid, C, S, 'client')
    ]->
    [ State(~cid, 'C1', C, S, 'client', 'auth')
    , Create_TLS_Channel3(C, ~cid, pk(ltkC), S, sid, pk(ltkS))
    ]

rule C_Request:
  let
    C=$C
    S=$S
    certificate_request_context=~certificate_request_context
  in
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , !TLS_Channel(ms, TLS_transcript, auth_status, $C, ~cid, $S, sid)
    , Fr(~certificate_request_context)
    , Fr(~request_id)
    ]
  --[ C_Req(~cid, ~certificate_request_context)
    , Instance(~cid, C, S, 'client')
    , Requested(~cid, C, 'client',  CertificateRequest)
    , TLS_Sent(ms)
    ]->
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , TLS_Send(~cid, C, S, CertificateRequest)
    , PendingReqI(~request_id, ~cid, 'client', CertificateRequest)
    ]

rule C_RecvReq:
  let
    C=$C
    S=$S
  in
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , TLS_Recv(~cid, S, C, CertificateRequest)
    , !Exporters(ms, 'client', ~cid, hccc, hccs, fmc, fms)
    , Fr(~request_id)
    ]
  --[ C_RecvReq(~cid)
    , RecvReq(C, ms, 'client', CertificateRequest)
    , Instance(~cid, C, S, 'client')
    , TLS_Recvd(ms)
    ]->
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , PendingReqR(~request_id, ~cid, 'client', CertificateRequest)
    ]

rule C_Send:
  let
    C=$C
    S=$S
    certificate_request_context=~certificate_request_context
    certificate=pk(ltkA)
    signature=compute_signature(ltkA, h(hccc, CertificateRequest, certificate))
    verify_data = hmac(fmc, <hccc, CertificateRequest, Certificate, CertificateVerify>)
  in
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , PendingReqR(~request_id, ~cid, 'client', CertificateRequest)
    , !Exporters(ms, 'client', ~cid, hccc, hccs, fmc, fms)
    , !Ltk($A, ltkA)
    , DelegateLtk($C, ltkA)
    ]
  --[ C_Send(~cid)
    , Owns(C, ms, 'client', <$A, ltkA>)
    , Instance(~cid, C, S, 'client')
    , Fulfil(~cid, C, 'client', CertificateRequest, <$A, pk(ltkA)>)
    , TLS_Sent(ms)
    ]->
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , TLS_Send(~cid, C, S, <Certificate, CertificateVerify, Finished>) 
    ]

rule C_Recv:
  let 
    C=$C
    S=$S
    certificate=pk(ltkA)
    sig_msg=signature_input(h(hccs, CertificateRequest, certificate))
    exp_verify_data = hmac(fms, <hccs, CertificateRequest, Certificate, CertificateVerify>)
  in
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , TLS_Recv(~cid, S, C, <Certificate, CertificateVerify, Finished>)
    , PendingReqI(~request_id, ~cid, 'client', CertificateRequest)
    , !Exporters(ms, 'client', ~cid, hccc, hccs, fmc, fms)
    , !Pk($A, pk(ltkA))
    ]
  --[ C_Recv(~cid)
    , Eq(verify(signature, sig_msg, pk(ltkA)), true)
    , Eq(verify_data, exp_verify_data)
    , Recv(C, ms, 'client',  <$A, pk(ltkA)>)
    , Fulfilled(~cid, C, 'client', CertificateRequest, <$A, pk(ltkA)>)
    , Instance(~cid, C, S, 'client')
    , TLS_Recvd(ms)
    ]->
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    ]

rule C_Recv_Spontaneous:
  let 
    C=$C
    S=$S
    certificate=pk(ltkA)
    sig_msg=signature_input(h(hccs, certificate))
    exp_verify_data = hmac(fms, <hccs, Certificate_Spontaneous, CertificateVerify>)
  in
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    , TLS_Recv(~cid, S, C, <Certificate_Spontaneous, CertificateVerify, Finished>)
    , !Exporters(ms, 'client', ~cid, hccc, hccs, fmc, fms)
    , !Pk($A, pk(ltkA))
    ]
  --[ C_Recv(~cid)
    , Eq(verify(signature, sig_msg, pk(ltkA)), true)
    , Eq(verify_data, exp_verify_data)
    , Recv(C, ms, 'client',  <$A, pk(ltkA)>)
    , Instance(~cid, C, S, 'client')
    , TLS_Recvd(ms)
    ]->
    [ State(~cid, 'C1', C, S, 'client', auth_status)
    ]
