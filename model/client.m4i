rule C_0:
  let
    C=$C
    S=$S
  in
    [ Fr(~tid)
    ]
  --[ Start(~tid, C, S, 'client') 
    , C0(~tid)
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , Create_TLS_Channel(C, ~tid, S)
    ]

rule C_Request:
  let
    C=$C
    S=$S
    certificate_request_context=~certificate_request_context
  in
    [ State(~tid, 'C0', C, S, 'client')
    , Fr(~certificate_request_context)
    ]
  --[ C_Req(~tid, ~certificate_request_context)
    , Instance(~tid, C, S, 'client')
    , Requested(~tid, C, 'client',  CertificateRequest)
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , TLS_Send(~tid, C, S, CertificateRequest)
    , PendingReq(~tid, 'client', CertificateRequest)
    ]

rule C_RecvReq:
  let
    C=$C
    S=$S
  in
    [ State(~tid, 'C0', C, S, 'client')
    , TLS_Recv(~tid, S, $PH, CertificateRequest)
    , !Exporters(~ms, 'client', ~tid, hccc, hccs, fmc, fms)
    ]
  --[ C_RecvReq(~tid)
    , RecvReq(C, ~ms, 'client', CertificateRequest)
    , Instance(~tid, C, S, 'client')
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , PendingReq(~tid, 'client', CertificateRequest)
    ]

rule C_Send:
  let
    C=$C
    S=$S
    certificate_request_context=~certificate_request_context
    certificate=pk(~ltkA)
    signature=compute_signature(~ltkA, h(hccc, CertificateRequest, certificate))
    verify_data = hmac(fmc, <hccc, CertificateRequest, Certificate, CertificateVerify>)
  in
    [ State(~tid, 'C0', C, S, 'client')
    , PendingReq(~tid, 'client', CertificateRequest)
    , !Exporters(~ms, 'client', ~tid, hccc, hccs, fmc, fms)
    , !Ltk($A, ~ltkA)
    , DelegateLtk($C, ~ltkA)
    ]
  --[ C_Send(~tid)
    , Owns(C, ~ms, 'client', <$A, ~ltkA>)
    , Instance(~tid, C, S, 'client')
    , Fulfil(~tid, C, 'client', CertificateRequest, <$A, pk(~ltkA)>)
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , TLS_Send(~tid, C, S, <Certificate, CertificateVerify, Finished>) 
    ]

rule C_Recv:
  let 
    C=$C
    S=$S
    certificate=pk(~ltkA)
    sig_msg=signature_input(h(hccs, CertificateRequest, certificate))
    exp_verify_data = hmac(fms, <hccs, CertificateRequest, Certificate, CertificateVerify>)
  in
    [ State(~tid, 'C0', C, S, 'client')
    , TLS_Recv(~tid, $PH, S, <Certificate, CertificateVerify, Finished>)
    , PendingReq(~tid, 'client', CertificateRequest)
    , !Exporters(~ms, 'client', ~tid, hccc, hccs, fmc, fms)
    , !Pk($A, pk(~ltkA))
    ]
  --[ C_Recv(~tid)
    , Eq(verify(signature, sig_msg, pk(~ltkA)), true)
    , Eq(verify_data, exp_verify_data)
    , Recv(C, ~ms, 'client',  <$A, pk(~ltkA)>)
    , Fulfilled(~tid, C, 'client', CertificateRequest, <$A, pk(~ltkA)>)
    , Instance(~tid, C, S, 'client')
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , !AcceptOwnership(~tid, C, S, pk(~ltkA))
    ]

rule C_Recv_Spontaneous:
  let 
    C=$C
    S=$S
    certificate=pk(~ltkA)
    sig_msg=signature_input(h(hccs, certificate))
    exp_verify_data = hmac(fms, <hccs, Certificate_Spontaneous, CertificateVerify>)
  in
    [ State(~tid, 'C0', C, S, 'client')
    , TLS_Recv(~tid, $PH, S, <Certificate_Spontaneous, CertificateVerify, Finished>)
    , !Exporters(~ms, 'client', ~tid, hccc, hccs, fmc, fms)
    , !Pk($A, pk(~ltkA))
    ]
  --[ C_Recv(~tid)
    , Eq(verify(signature, sig_msg, pk(~ltkA)), true)
    , Eq(verify_data, exp_verify_data)
    , Recv(C, ~ms, 'client',  <$A, pk(~ltkA)>)
    , Instance(~tid, C, S, 'client')
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , !AcceptOwnership(~tid, C, S, pk(~ltkA))
    ]
