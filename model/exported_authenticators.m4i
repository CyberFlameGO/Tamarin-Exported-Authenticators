include(crypto.m4i)dnl
include(msgs.m4i)dnl
include(adversary.m4i)dnl

rule Register_pk:
    [ Fr(~ltk) ]
  -->
    [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)) ]


rule Get_pk:
    [ !Pk(A, pubkey) ]
  -->
     [ Out(pubkey) ]

rule Create_TLS_channel:
    [ Fr(ms)
    , Fr(TLS_transcript) 
    , Fr(cid)
    , Create_TLS_Channel(owner_host, owner_cid, target_host)
    ]
  --[
      SessionKey(ms, TLS_transcript)
    ]->
    [ !TLS_Channel(ms, TLS_transcript, owner_host, owner_cid, target_host, cid)
    , !Exporters(ms, cid, Handshake_Context(client), Handshake_Context(server), Finished_MAC(client), Finished_MAC(server))
    , !Exporters(ms, owner_cid, Handshake_Context(client), Handshake_Context(server), Finished_MAC(client), Finished_MAC(server))
    ]

rule Send_TLS_Channel_owner:
    [ TLS_Send(cid, from_host, to_host, msg)
    , !TLS_Channel(ms, TLS_transcript, owner_host, owner_cid, target_host, target_cid)
    ]
  --[ Check_pair_or_swapped(from_host, to_host, owner_host, target_host)
    , Eq(cid, owner_cid)
    ]->
    [ TLS_Recv(target_cid, from_host, to_host, msg) ]

rule Send_TLS_Channel_target:
    [ TLS_Send(cid, from_host, to_host, msg)
    , !TLS_Channel(ms, TLS_transcript, owner_host, owner_cid, target_host, target_cid)
    ]
  --[ Check_pair_or_swapped(from_host, to_host, owner_host, target_host)
    , Eq(cid, target_cid)
    ]->
    [ TLS_Recv(owner_cid, from_host, to_host, msg) ]

/* Protocol */
rule C_0:
  let
    C=$C
    S=$S
  in
    [ Fr(~tid)
    ]
  --[ Start(~tid, C) 
    , C0(~tid)
    ]->
    [ State(~tid, 'C0', C, S, 'client')
    , Create_TLS_Channel(C, ~tid, S)
    ]

rule C_1:
  let
    C=$C
    S=$S
    certificate_request_context=~certificate_request_context
    certificate=pk(~ltkC)
    signature=compute_signature(~ltkC, h(hccc, certificate))
    verify_data = hmac(fmc, <hccc, Certificate, CertificateVerify>)
  in
    [ State(~tid, 'C0', C, S, 'client')
    , Fr(~certificate_request_context)
    , !Exporters(~ms, ~tid, hccc, hccs, fmc, fms)
    , !Ltk($C, ~ltkC)
    ]
  --[ C1(~tid)
    , Owns($C, ~ltkC)
    ]->
    [ State(~tid, 'C1', C, S, 'client')
    , TLS_Send(~tid, C, S, <Certificate, CertificateVerify, Finished>) 
    ]
    
rule S_0:
  let 
    C=$C
    S=$S
    certificate=pk(~ltkC)
    signature=compute_signature(~ltkC, h(hccc, certificate))
    verify_data = hmac(fmc, <hccc, cert, CertificateVerify>)
  in
    [ TLS_Recv(~tid, C, S, <cert, cert_verify, fin>)
    , !Exporters(~ms, ~tid, hccc, hccs, fmc, fms)
    , !Pk($C, pk(~ltkC))
    ]
  --[ Start(~tid, S) 
    , S0(~tid)
    , Eq(cert_verify, CertificateVerify)
    , Eq(fin, Finished)
    , Recv(S, C, pk(~ltkC))
    ]->
    [ State(~tid, 'S0', S, C, 'server')
    ]

